
Honk.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000140  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000003f  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000dd  00000000  00000000  0000019f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000078  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000010d  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000091  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a6 36       	cpi	r26, 0x66	; 102
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	29 d0       	rcall	.+82     	; 0x8e <main>
  3c:	45 c0       	rjmp	.+138    	; 0xc8 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <GetTick>:
char adcState = 0, adcVal = 0;;

char GetTick()
{
	static unsigned int c1 = 0, c2 = 0;
	c1++;
  40:	80 91 64 00 	lds	r24, 0x0064
  44:	90 91 65 00 	lds	r25, 0x0065
  48:	01 96       	adiw	r24, 0x01	; 1
  4a:	90 93 65 00 	sts	0x0065, r25
  4e:	80 93 64 00 	sts	0x0064, r24
	if(c1 >= 10000)
  52:	80 51       	subi	r24, 0x10	; 16
  54:	97 42       	sbci	r25, 0x27	; 39
  56:	68 f0       	brcs	.+26     	; 0x72 <GetTick+0x32>
	{
		c1 = 0;
  58:	10 92 65 00 	sts	0x0065, r1
  5c:	10 92 64 00 	sts	0x0064, r1
		c2++; 
  60:	80 91 62 00 	lds	r24, 0x0062
  64:	90 91 63 00 	lds	r25, 0x0063
  68:	01 96       	adiw	r24, 0x01	; 1
  6a:	90 93 63 00 	sts	0x0063, r25
  6e:	80 93 62 00 	sts	0x0062, r24
	} 
	if(c2 >= 5)
  72:	80 91 62 00 	lds	r24, 0x0062
  76:	90 91 63 00 	lds	r25, 0x0063
  7a:	05 97       	sbiw	r24, 0x05	; 5
  7c:	10 f4       	brcc	.+4      	; 0x82 <GetTick+0x42>
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	08 95       	ret
	{
		c2 = 0; 
  82:	10 92 63 00 	sts	0x0063, r1
  86:	10 92 62 00 	sts	0x0062, r1
  8a:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
  8c:	08 95       	ret

0000008e <main>:

int main(void)
{ 

DDRB = 0b00000001;
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	87 bb       	out	0x17, r24	; 23

TCCR0A = 0b01000010;
  92:	82 e4       	ldi	r24, 0x42	; 66
  94:	8a bd       	out	0x2a, r24	; 42
TCCR0B = 0b00000011;
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	83 bf       	out	0x33, r24	; 51
ADMUX = 0b00100010;
  9a:	82 e2       	ldi	r24, 0x22	; 34
  9c:	87 b9       	out	0x07, r24	; 7


OCR0A = 30;//10 bis 150
  9e:	8e e1       	ldi	r24, 0x1E	; 30
  a0:	89 bd       	out	0x29, r24	; 41
while(1)
{ 
 	if((ADCSRA & 64) == 0) 
     {
			adcVal = ADCH;
			ADCSRA = 0b11000110; 
  a2:	36 ec       	ldi	r19, 0xC6	; 198
			{
				DDRB = 0;
			}
			else
			{
				DDRB = 1;
  a4:	21 e0       	ldi	r18, 0x01	; 1


OCR0A = 30;//10 bis 150
while(1)
{ 
 	if((ADCSRA & 64) == 0) 
  a6:	36 99       	sbic	0x06, 6	; 6
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <main+0x18>
     {
			adcVal = ADCH;
  aa:	85 b1       	in	r24, 0x05	; 5
			ADCSRA = 0b11000110; 
  ac:	36 b9       	out	0x06, r19	; 6
			adcVal = ADCH;
  ae:	85 b1       	in	r24, 0x05	; 5
			if(adcVal < 10)
  b0:	8a 30       	cpi	r24, 0x0A	; 10
  b2:	10 f4       	brcc	.+4      	; 0xb8 <main+0x2a>
			{
				DDRB = 0;
  b4:	17 ba       	out	0x17, r1	; 23
  b6:	01 c0       	rjmp	.+2      	; 0xba <main+0x2c>
			}
			else
			{
				DDRB = 1;
  b8:	27 bb       	out	0x17, r18	; 23
			}
        	OCR0A = 30 + ((adcVal-10) >> 1);  
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0a 97       	sbiw	r24, 0x0a	; 10
  be:	95 95       	asr	r25
  c0:	87 95       	ror	r24
  c2:	82 5e       	subi	r24, 0xE2	; 226
  c4:	89 bd       	out	0x29, r24	; 41
  c6:	ef cf       	rjmp	.-34     	; 0xa6 <main+0x18>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>


ExterIO_1284_PPM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000754  000007e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000754  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  00800108  00800108  000007f0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000025d  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000054a  00000000  00000000  00000a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000195  00000000  00000000  00000fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000669  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  000017b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000273  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000100  00000000  00000000  00001b0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_1>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__vector_20>
  54:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_21>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e5       	ldi	r30, 0x54	; 84
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 35       	cpi	r26, 0x54	; 84
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 6d 01 	call	0x2da	; 0x2da <main>
  c6:	0c 94 a8 03 	jmp	0x750	; 0x750 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <IsCtsFtee>:
	CTS:  PD3 // Clear to send 	-> input
*/

char IsCtsFtee()
{ 
	if((PIND & CTS) == CTS) 
  ce:	89 b1       	in	r24, 0x09	; 9
  d0:	86 95       	lsr	r24
  d2:	86 95       	lsr	r24
  d4:	86 95       	lsr	r24
  d6:	80 95       	com	r24
	}
	else 
	{
		return CTS_BUSY;
	}
}
  d8:	81 70       	andi	r24, 0x01	; 1
  da:	08 95       	ret

000000dc <DiffHeadTail>:

unsigned int DiffHeadTail(unsigned int headC, unsigned int tailC)
{
	if(headC > tailC) return (headC - tailC);
  dc:	68 17       	cp	r22, r24
  de:	79 07       	cpc	r23, r25
  e0:	28 f4       	brcc	.+10     	; 0xec <DiffHeadTail+0x10>
  e2:	9c 01       	movw	r18, r24
  e4:	26 1b       	sub	r18, r22
  e6:	37 0b       	sbc	r19, r23
  e8:	b9 01       	movw	r22, r18
  ea:	08 c0       	rjmp	.+16     	; 0xfc <DiffHeadTail+0x20>
	else if(headC < tailC)return (tailC - headC);
  ec:	86 17       	cp	r24, r22
  ee:	97 07       	cpc	r25, r23
  f0:	18 f0       	brcs	.+6      	; 0xf8 <DiffHeadTail+0x1c>
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DiffHeadTail+0x20>
  f8:	68 1b       	sub	r22, r24
  fa:	79 0b       	sbc	r23, r25
	else return 0;
}
  fc:	cb 01       	movw	r24, r22
  fe:	08 95       	ret

00000100 <GetSwitchPins>:


unsigned char GetSwitchPins()
{
#ifdef __AVR_ATmega1284P__
return (unsigned char)(PINC ^ 0b11111111);
 100:	86 b1       	in	r24, 0x06	; 6
#ifdef __AVR_ATmega8__
tmpC |= (((PINB ^ 0b11111111) & 0b00111100)<<0);
tmpC |= (((PIND ^ 0b11111111) & 0b01100000)>>5);
return tmpC;
#endif
}
 102:	80 95       	com	r24
 104:	08 95       	ret

00000106 <Enable_UDREIE>:

void Enable_UDREIE()
{
#ifdef __AVR_ATmega1284P__
UCSRB_COM |= (1<<UDRIE0);
 106:	e1 ec       	ldi	r30, 0xC1	; 193
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	80 83       	st	Z, r24
#endif

#ifdef __AVR_ATmega8__
UCSRB_COM |= (1<<UDRIE);
#endif
}
 110:	08 95       	ret

00000112 <Disable_UDREIE>:

void Disable_UDREIE()
{
#ifdef __AVR_ATmega1284P__
UCSRB_COM &= ~(1<<UDRIE0);
 112:	e1 ec       	ldi	r30, 0xC1	; 193
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8f 7d       	andi	r24, 0xDF	; 223
 11a:	80 83       	st	Z, r24
#endif

#ifdef __AVR_ATmega8__
UCSRB_COM &= ~(1<<UDRIE);
#endif
}
 11c:	08 95       	ret

0000011e <Enable_ExtInt>:

void Enable_ExtInt()
{
#ifdef __AVR_ATmega1284P__
EIFR |= 0b00000001;
 11e:	e0 9a       	sbi	0x1c, 0	; 28
EIMSK |= 0b00000001;
 120:	e8 9a       	sbi	0x1d, 0	; 29

#ifdef __AVR_ATmega8__
GIFR |= (1<<INTF0);// clear flag
GICR |= (1<<INT0);// Int enable
#endif
}
 122:	08 95       	ret

00000124 <Disable_ExtInt>:

void Disable_ExtInt()
{
#ifdef __AVR_ATmega1284P__
EIMSK &= ~(1<<INT0);
 124:	e8 98       	cbi	0x1d, 0	; 29
#endif

#ifdef __AVR_ATmega8__
GICR &= ~(1<<INT0);// Int enable
#endif
}
 126:	08 95       	ret

00000128 <GetAdcs>:

void GetAdcs()
{
unsigned int stableChnlBlk = 0;
if(curChnlBlk == 0)stableChnlBlk = 4;
 128:	80 91 1a 01 	lds	r24, 0x011A
 12c:	90 91 1b 01 	lds	r25, 0x011B
 130:	89 2b       	or	r24, r25
 132:	19 f4       	brne	.+6      	; 0x13a <GetAdcs+0x12>
 134:	a4 e0       	ldi	r26, 0x04	; 4
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <GetAdcs+0x16>
 13a:	a0 e0       	ldi	r26, 0x00	; 0
 13c:	b0 e0       	ldi	r27, 0x00	; 0


byteSendArr[0] = (ppmInputChnls[0 + stableChnlBlk] & 0b0000001111100000)>>5;
 13e:	fd 01       	movw	r30, r26
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	e1 5e       	subi	r30, 0xE1	; 225
 146:	fe 4f       	sbci	r31, 0xFE	; 254
 148:	20 81       	ld	r18, Z
 14a:	31 81       	ldd	r19, Z+1	; 0x01
 14c:	c9 01       	movw	r24, r18
 14e:	80 7e       	andi	r24, 0xE0	; 224
 150:	93 70       	andi	r25, 0x03	; 3
 152:	35 e0       	ldi	r19, 0x05	; 5
 154:	96 95       	lsr	r25
 156:	87 95       	ror	r24
 158:	3a 95       	dec	r19
 15a:	e1 f7       	brne	.-8      	; 0x154 <GetAdcs+0x2c>
 15c:	80 93 45 01 	sts	0x0145, r24
byteSendArr[1] = (ppmInputChnls[0 + stableChnlBlk] & 0b0000000000011111);
 160:	2f 71       	andi	r18, 0x1F	; 31
 162:	20 93 46 01 	sts	0x0146, r18

byteSendArr[2] = (ppmInputChnls[1 + stableChnlBlk] & 0b0000001111100000)>>5;
 166:	fd 01       	movw	r30, r26
 168:	31 96       	adiw	r30, 0x01	; 1
 16a:	ee 0f       	add	r30, r30
 16c:	ff 1f       	adc	r31, r31
 16e:	e1 5e       	subi	r30, 0xE1	; 225
 170:	fe 4f       	sbci	r31, 0xFE	; 254
 172:	20 81       	ld	r18, Z
 174:	31 81       	ldd	r19, Z+1	; 0x01
 176:	c9 01       	movw	r24, r18
 178:	80 7e       	andi	r24, 0xE0	; 224
 17a:	93 70       	andi	r25, 0x03	; 3
 17c:	75 e0       	ldi	r23, 0x05	; 5
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	7a 95       	dec	r23
 184:	e1 f7       	brne	.-8      	; 0x17e <GetAdcs+0x56>
 186:	80 93 47 01 	sts	0x0147, r24
byteSendArr[3] = (ppmInputChnls[1 + stableChnlBlk] & 0b0000000000011111);
 18a:	2f 71       	andi	r18, 0x1F	; 31
 18c:	20 93 48 01 	sts	0x0148, r18


byteSendArr[4] = (ppmInputChnls[2 + stableChnlBlk] & 0b0000001111100000)>>5;
 190:	12 96       	adiw	r26, 0x02	; 2
 192:	fd 01       	movw	r30, r26
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	e1 5e       	subi	r30, 0xE1	; 225
 19a:	fe 4f       	sbci	r31, 0xFE	; 254
 19c:	20 81       	ld	r18, Z
 19e:	31 81       	ldd	r19, Z+1	; 0x01
 1a0:	c9 01       	movw	r24, r18
 1a2:	80 7e       	andi	r24, 0xE0	; 224
 1a4:	93 70       	andi	r25, 0x03	; 3
 1a6:	55 e0       	ldi	r21, 0x05	; 5
 1a8:	96 95       	lsr	r25
 1aa:	87 95       	ror	r24
 1ac:	5a 95       	dec	r21
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <GetAdcs+0x80>
 1b0:	80 93 49 01 	sts	0x0149, r24
byteSendArr[5] = (ppmInputChnls[2 + stableChnlBlk] & 0b0000000000011111);
 1b4:	2f 71       	andi	r18, 0x1F	; 31
 1b6:	20 93 4a 01 	sts	0x014A, r18

byteSendArr[6] = (ppmInputChnls[3 + stableChnlBlk] & 0b0000001111100000)>>5;
 1ba:	11 96       	adiw	r26, 0x01	; 1
 1bc:	aa 0f       	add	r26, r26
 1be:	bb 1f       	adc	r27, r27
 1c0:	a1 5e       	subi	r26, 0xE1	; 225
 1c2:	be 4f       	sbci	r27, 0xFE	; 254
 1c4:	2d 91       	ld	r18, X+
 1c6:	3c 91       	ld	r19, X
 1c8:	c9 01       	movw	r24, r18
 1ca:	80 7e       	andi	r24, 0xE0	; 224
 1cc:	93 70       	andi	r25, 0x03	; 3
 1ce:	35 e0       	ldi	r19, 0x05	; 5
 1d0:	96 95       	lsr	r25
 1d2:	87 95       	ror	r24
 1d4:	3a 95       	dec	r19
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <GetAdcs+0xa8>
 1d8:	80 93 4b 01 	sts	0x014B, r24
byteSendArr[7] = (ppmInputChnls[3 + stableChnlBlk] & 0b0000000000011111);
 1dc:	2f 71       	andi	r18, 0x1F	; 31
 1de:	20 93 4c 01 	sts	0x014C, r18

}
 1e2:	08 95       	ret

000001e4 <PpmEdgeInput>:


void PpmEdgeInput()
{
	TIFR1 |= 0b00100000;
 1e4:	b5 9a       	sbi	0x16, 5	; 22
	ticksEnd = ICR1;
 1e6:	40 91 86 00 	lds	r20, 0x0086
 1ea:	50 91 87 00 	lds	r21, 0x0087
 1ee:	50 93 30 01 	sts	0x0130, r21
 1f2:	40 93 2f 01 	sts	0x012F, r20
	
	if(ticksEnd > ticksStart)
 1f6:	80 91 4f 01 	lds	r24, 0x014F
 1fa:	90 91 50 01 	lds	r25, 0x0150
 1fe:	84 17       	cp	r24, r20
 200:	95 07       	cpc	r25, r21
 202:	28 f4       	brcc	.+10     	; 0x20e <PpmEdgeInput+0x2a>
	{
		pulseLength = ticksEnd - ticksStart;
 204:	9a 01       	movw	r18, r20
 206:	28 1b       	sub	r18, r24
 208:	39 0b       	sbc	r19, r25
 20a:	c9 01       	movw	r24, r18
 20c:	04 c0       	rjmp	.+8      	; 0x216 <PpmEdgeInput+0x32>
	}
	else
	{
		pulseLength = 65535 - ticksStart + ticksEnd;
 20e:	80 95       	com	r24
 210:	90 95       	com	r25
 212:	84 0f       	add	r24, r20
 214:	95 1f       	adc	r25, r21
 216:	90 93 1e 01 	sts	0x011E, r25
 21a:	80 93 1d 01 	sts	0x011D, r24
	}



	if(pulseLength > 6000)
 21e:	80 91 1d 01 	lds	r24, 0x011D
 222:	90 91 1e 01 	lds	r25, 0x011E
 226:	37 e1       	ldi	r19, 0x17	; 23
 228:	81 37       	cpi	r24, 0x71	; 113
 22a:	93 07       	cpc	r25, r19
 22c:	b0 f0       	brcs	.+44     	; 0x25a <PpmEdgeInput+0x76>
	{
		pulseCntr = 0;
 22e:	10 92 52 01 	sts	0x0152, r1
 232:	10 92 51 01 	sts	0x0151, r1
		if(curChnlBlk >= 4)curChnlBlk = 0;
 236:	80 91 1a 01 	lds	r24, 0x011A
 23a:	90 91 1b 01 	lds	r25, 0x011B
 23e:	04 97       	sbiw	r24, 0x04	; 4
 240:	28 f0       	brcs	.+10     	; 0x24c <PpmEdgeInput+0x68>
 242:	10 92 1b 01 	sts	0x011B, r1
 246:	10 92 1a 01 	sts	0x011A, r1
 24a:	42 c0       	rjmp	.+132    	; 0x2d0 <PpmEdgeInput+0xec>
		else curChnlBlk = 4;
 24c:	84 e0       	ldi	r24, 0x04	; 4
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	90 93 1b 01 	sts	0x011B, r25
 254:	80 93 1a 01 	sts	0x011A, r24
 258:	3b c0       	rjmp	.+118    	; 0x2d0 <PpmEdgeInput+0xec>
	}
	else 
	{
		if(pulseCntr < 4)
 25a:	20 91 51 01 	lds	r18, 0x0151
 25e:	30 91 52 01 	lds	r19, 0x0152
 262:	24 30       	cpi	r18, 0x04	; 4
 264:	31 05       	cpc	r19, r1
 266:	a0 f5       	brcc	.+104    	; 0x2d0 <PpmEdgeInput+0xec>
		{
			pulseLength = pulseLength >> 1;
 268:	96 95       	lsr	r25
 26a:	87 95       	ror	r24
			if(pulseLength < 1000) pulseLength = 0;
 26c:	63 e0       	ldi	r22, 0x03	; 3
 26e:	88 3e       	cpi	r24, 0xE8	; 232
 270:	96 07       	cpc	r25, r22
 272:	28 f4       	brcc	.+10     	; 0x27e <PpmEdgeInput+0x9a>
 274:	10 92 1e 01 	sts	0x011E, r1
 278:	10 92 1d 01 	sts	0x011D, r1
 27c:	06 c0       	rjmp	.+12     	; 0x28a <PpmEdgeInput+0xa6>
			else pulseLength -= 1000;
 27e:	88 5e       	subi	r24, 0xE8	; 232
 280:	93 40       	sbci	r25, 0x03	; 3
 282:	90 93 1e 01 	sts	0x011E, r25
 286:	80 93 1d 01 	sts	0x011D, r24

			if(pulseCntr == 0)
 28a:	21 15       	cp	r18, r1
 28c:	31 05       	cpc	r19, r1
 28e:	51 f4       	brne	.+20     	; 0x2a4 <PpmEdgeInput+0xc0>
			{
				if(pulseLength > 700)
 290:	80 91 1d 01 	lds	r24, 0x011D
 294:	90 91 1e 01 	lds	r25, 0x011E
 298:	8d 5b       	subi	r24, 0xBD	; 189
 29a:	92 40       	sbci	r25, 0x02	; 2
 29c:	10 f0       	brcs	.+4      	; 0x2a2 <PpmEdgeInput+0xbe>
				{
					PORTD |= 0b00100000;
 29e:	5d 9a       	sbi	0x0b, 5	; 11
 2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <PpmEdgeInput+0xc0>
				}
				else
				{
					PORTD &= 0b11011111;
 2a2:	5d 98       	cbi	0x0b, 5	; 11
				}
			}

			ppmInputChnls[pulseCntr + curChnlBlk] = pulseLength;
 2a4:	e0 91 1a 01 	lds	r30, 0x011A
 2a8:	f0 91 1b 01 	lds	r31, 0x011B
 2ac:	e2 0f       	add	r30, r18
 2ae:	f3 1f       	adc	r31, r19
 2b0:	ee 0f       	add	r30, r30
 2b2:	ff 1f       	adc	r31, r31
 2b4:	e1 5e       	subi	r30, 0xE1	; 225
 2b6:	fe 4f       	sbci	r31, 0xFE	; 254
 2b8:	80 91 1d 01 	lds	r24, 0x011D
 2bc:	90 91 1e 01 	lds	r25, 0x011E
 2c0:	91 83       	std	Z+1, r25	; 0x01
 2c2:	80 83       	st	Z, r24
			pulseCntr++;
 2c4:	2f 5f       	subi	r18, 0xFF	; 255
 2c6:	3f 4f       	sbci	r19, 0xFF	; 255
 2c8:	30 93 52 01 	sts	0x0152, r19
 2cc:	20 93 51 01 	sts	0x0151, r18
		}
	}
		
	ticksStart = ticksEnd;
 2d0:	50 93 50 01 	sts	0x0150, r21
 2d4:	40 93 4f 01 	sts	0x014F, r20
}
 2d8:	08 95       	ret

000002da <main>:

int main(void)
{ 
 2da:	cf 92       	push	r12
 2dc:	df 92       	push	r13
 2de:	ef 92       	push	r14
 2e0:	ff 92       	push	r15
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
}

void Enable_ExtInt()
{
#ifdef __AVR_ATmega1284P__
EIFR |= 0b00000001;
 2ea:	e0 9a       	sbi	0x1c, 0	; 28
EIMSK |= 0b00000001;
 2ec:	e8 9a       	sbi	0x1d, 0	; 29
{ 

Enable_ExtInt();

/* Set baud rate  for 9600 Baud*/
UBRRH_COM = (unsigned char)(0);
 2ee:	10 92 c5 00 	sts	0x00C5, r1
/* Enable receiver and transmitter */
UCSRB_COM = (1<<7)|(1<<4)|(1<<3);//
 2f2:	88 e9       	ldi	r24, 0x98	; 152
 2f4:	80 93 c1 00 	sts	0x00C1, r24
UBRRL_COM = (unsigned char)(25);
UCSRC_COM = 128+6; 
#endif

#ifdef __AVR_ATmega1284P__
UBRRL_COM = (unsigned char)(25);
 2f8:	89 e1       	ldi	r24, 0x19	; 25
 2fa:	80 93 c4 00 	sts	0x00C4, r24
UCSRC_COM = 6; 
 2fe:	86 e0       	ldi	r24, 0x06	; 6
 300:	80 93 c2 00 	sts	0x00C2, r24
#endif

PORTD |= CTS;
 304:	5b 9a       	sbi	0x0b, 3	; 11
#endif 


#ifdef __AVR_ATmega1284P__

EICRA = 0b00000001;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	80 93 69 00 	sts	0x0069, r24
DDRD = 0b00100010;//bit 5 LED
 30c:	82 e2       	ldi	r24, 0x22	; 34
 30e:	8a b9       	out	0x0a, r24	; 10
PORTC = 0b11111111;
 310:	8f ef       	ldi	r24, 0xFF	; 255
 312:	88 b9       	out	0x08, r24	; 8
TCCR1B = 0b01000010;
 314:	82 e4       	ldi	r24, 0x42	; 66
 316:	80 93 81 00 	sts	0x0081, r24
#endif

sei(); 
 31a:	78 94       	sei
		byteSendArr[1] = (MSG_AMT_REQ_END + 3);
		Enable_UDREIE();
	}
	else if(extMode == EXT_ADC_FILL)
	{
		extMode = EXT_ADC_REQ;
 31c:	01 e0       	ldi	r16, 0x01	; 1
 31e:	10 e0       	ldi	r17, 0x00	; 0
		byteSendArr[1] |= (switchBits & 0b00011111);
		Enable_UDREIE();
	}
	else if(extMode == EXT_AMT_FILL)
	{
		extMode = EXT_INIT;
 320:	c2 e0       	ldi	r28, 0x02	; 2
 322:	d0 e0       	ldi	r29, 0x00	; 0
		else
		{
			byteSendArr[0] = 0;
		}
		byteSendArr[0] |= 8;
		byteSendArr[1] = (MSG_AMT_REQ_END + 3);
 324:	b3 e6       	ldi	r27, 0x63	; 99
 326:	cb 2e       	mov	r12, r27
		extMode = EXT_INIT;
		byteCntr = 0;
		switchBits = GetSwitchPins();
		if(TOKEN_FLAG == 0)
		{
			byteSendArr[0] = MSG_AMT_REQ_BEG;
 328:	a0 e4       	ldi	r26, 0x40	; 64
 32a:	da 2e       	mov	r13, r26
		else
		{
			byteSendArr[0] = 0;
		}
		byteSendArr[0] |= (switchBits >> 5);
		byteSendArr[1] = DIG_END;
 32c:	f0 ea       	ldi	r31, 0xA0	; 160
 32e:	ef 2e       	mov	r14, r31
		extMode = EXT_DIG_REQ;
		byteCntr = 0;
		switchBits = GetSwitchPins();
		if(TOKEN_FLAG == 0)
		{
			byteSendArr[0] = DIG_BEGIN;
 330:	e0 e8       	ldi	r30, 0x80	; 128
 332:	fe 2e       	mov	r15, r30
sei(); 

while(1)
{

	if(TIFR1 & 0b00100000)PpmEdgeInput();
 334:	b5 9b       	sbis	0x16, 5	; 22
 336:	02 c0       	rjmp	.+4      	; 0x33c <main+0x62>
 338:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <PpmEdgeInput>

	if(extMode == EXT_DIG_FILL)
 33c:	80 91 02 01 	lds	r24, 0x0102
 340:	90 91 03 01 	lds	r25, 0x0103
 344:	05 97       	sbiw	r24, 0x05	; 5
 346:	39 f5       	brne	.+78     	; 0x396 <main+0xbc>
	{
		extMode = EXT_DIG_REQ;
 348:	10 92 03 01 	sts	0x0103, r1
 34c:	10 92 02 01 	sts	0x0102, r1
		byteCntr = 0;
 350:	10 92 01 01 	sts	0x0101, r1
 354:	10 92 00 01 	sts	0x0100, r1


unsigned char GetSwitchPins()
{
#ifdef __AVR_ATmega1284P__
return (unsigned char)(PINC ^ 0b11111111);
 358:	26 b1       	in	r18, 0x06	; 6
 35a:	20 95       	com	r18

	if(extMode == EXT_DIG_FILL)
	{
		extMode = EXT_DIG_REQ;
		byteCntr = 0;
		switchBits = GetSwitchPins();
 35c:	20 93 53 01 	sts	0x0153, r18
		if(TOKEN_FLAG == 0)
 360:	80 91 19 01 	lds	r24, 0x0119
 364:	88 23       	and	r24, r24
 366:	19 f4       	brne	.+6      	; 0x36e <main+0x94>
		{
			byteSendArr[0] = DIG_BEGIN;
 368:	f0 92 45 01 	sts	0x0145, r15
 36c:	02 c0       	rjmp	.+4      	; 0x372 <main+0x98>
		}
		else
		{
			byteSendArr[0] = 0;
 36e:	10 92 45 01 	sts	0x0145, r1
		}
		byteSendArr[0] |= (switchBits >> 5);
 372:	90 91 45 01 	lds	r25, 0x0145
 376:	82 2f       	mov	r24, r18
 378:	82 95       	swap	r24
 37a:	86 95       	lsr	r24
 37c:	87 70       	andi	r24, 0x07	; 7
 37e:	89 2b       	or	r24, r25
 380:	80 93 45 01 	sts	0x0145, r24
		byteSendArr[1] = DIG_END;
 384:	e0 92 46 01 	sts	0x0146, r14
		byteSendArr[1] |= (switchBits & 0b00011111);
 388:	80 91 46 01 	lds	r24, 0x0146
 38c:	2f 71       	andi	r18, 0x1F	; 31
 38e:	28 2b       	or	r18, r24
 390:	20 93 46 01 	sts	0x0146, r18
 394:	42 c0       	rjmp	.+132    	; 0x41a <main+0x140>
		Enable_UDREIE();
	}
	else if(extMode == EXT_AMT_FILL)
 396:	80 91 02 01 	lds	r24, 0x0102
 39a:	90 91 03 01 	lds	r25, 0x0103
 39e:	06 97       	sbiw	r24, 0x06	; 6
 3a0:	e9 f4       	brne	.+58     	; 0x3dc <main+0x102>
	{
		extMode = EXT_INIT;
 3a2:	d0 93 03 01 	sts	0x0103, r29
 3a6:	c0 93 02 01 	sts	0x0102, r28
		byteCntr = 0;
 3aa:	10 92 01 01 	sts	0x0101, r1
 3ae:	10 92 00 01 	sts	0x0100, r1


unsigned char GetSwitchPins()
{
#ifdef __AVR_ATmega1284P__
return (unsigned char)(PINC ^ 0b11111111);
 3b2:	86 b1       	in	r24, 0x06	; 6
	}
	else if(extMode == EXT_AMT_FILL)
	{
		extMode = EXT_INIT;
		byteCntr = 0;
		switchBits = GetSwitchPins();
 3b4:	80 95       	com	r24
 3b6:	80 93 53 01 	sts	0x0153, r24
		if(TOKEN_FLAG == 0)
 3ba:	80 91 19 01 	lds	r24, 0x0119
 3be:	88 23       	and	r24, r24
 3c0:	19 f4       	brne	.+6      	; 0x3c8 <main+0xee>
		{
			byteSendArr[0] = MSG_AMT_REQ_BEG;
 3c2:	d0 92 45 01 	sts	0x0145, r13
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <main+0xf2>
		}
		else
		{
			byteSendArr[0] = 0;
 3c8:	10 92 45 01 	sts	0x0145, r1
		}
		byteSendArr[0] |= 8;
 3cc:	80 91 45 01 	lds	r24, 0x0145
 3d0:	88 60       	ori	r24, 0x08	; 8
 3d2:	80 93 45 01 	sts	0x0145, r24
		byteSendArr[1] = (MSG_AMT_REQ_END + 3);
 3d6:	c0 92 46 01 	sts	0x0146, r12
 3da:	1f c0       	rjmp	.+62     	; 0x41a <main+0x140>
		Enable_UDREIE();
	}
	else if(extMode == EXT_ADC_FILL)
 3dc:	80 91 02 01 	lds	r24, 0x0102
 3e0:	90 91 03 01 	lds	r25, 0x0103
 3e4:	09 97       	sbiw	r24, 0x09	; 9
 3e6:	09 f0       	breq	.+2      	; 0x3ea <main+0x110>
 3e8:	a5 cf       	rjmp	.-182    	; 0x334 <main+0x5a>
	{
		extMode = EXT_ADC_REQ;
 3ea:	10 93 03 01 	sts	0x0103, r17
 3ee:	00 93 02 01 	sts	0x0102, r16
		byteCntr = 0;
 3f2:	10 92 01 01 	sts	0x0101, r1
 3f6:	10 92 00 01 	sts	0x0100, r1
		GetAdcs();
 3fa:	0e 94 94 00 	call	0x128	; 0x128 <GetAdcs>
		if(TOKEN_FLAG == 0)
 3fe:	80 91 19 01 	lds	r24, 0x0119
 402:	88 23       	and	r24, r24
 404:	29 f4       	brne	.+10     	; 0x410 <main+0x136>
		{
			byteSendArr[0] |= ADC_BEGIN;
 406:	80 91 45 01 	lds	r24, 0x0145
 40a:	80 6c       	ori	r24, 0xC0	; 192
 40c:	80 93 45 01 	sts	0x0145, r24
		}
		else
		{
			//byteSendArr[0] = 0;
		}
		byteSendArr[7] |= ADC_END;
 410:	80 91 4c 01 	lds	r24, 0x014C
 414:	80 6e       	ori	r24, 0xE0	; 224
 416:	80 93 4c 01 	sts	0x014C, r24
}

void Enable_UDREIE()
{
#ifdef __AVR_ATmega1284P__
UCSRB_COM |= (1<<UDRIE0);
 41a:	80 91 c1 00 	lds	r24, 0x00C1
 41e:	80 62       	ori	r24, 0x20	; 32
 420:	80 93 c1 00 	sts	0x00C1, r24
 424:	87 cf       	rjmp	.-242    	; 0x334 <main+0x5a>

00000426 <__vector_1>:
}
}//main

/**/
SIGNAL (INT0_vect)
{
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	0f 92       	push	r0
 42e:	11 24       	eor	r1, r1
	DDRD |= RTS;
 430:	54 9a       	sbi	0x0a, 4	; 10
}

void Disable_ExtInt()
{
#ifdef __AVR_ATmega1284P__
EIMSK &= ~(1<<INT0);
 432:	e8 98       	cbi	0x1d, 0	; 29
/**/
SIGNAL (INT0_vect)
{
	DDRD |= RTS;
	Disable_ExtInt();
}
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <__vector_20>:


SIGNAL (USART_RX_vect_COM)//TIMER1_COMPA_vect) 
{ 
 43e:	1f 92       	push	r1
 440:	0f 92       	push	r0
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	0f 92       	push	r0
 446:	0b b6       	in	r0, 0x3b	; 59
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	2f 93       	push	r18
 44e:	3f 93       	push	r19
 450:	4f 93       	push	r20
 452:	5f 93       	push	r21
 454:	8f 93       	push	r24
 456:	9f 93       	push	r25
 458:	ef 93       	push	r30
 45a:	ff 93       	push	r31
char rxChar;
char newMode;
unsigned int headTmp;	

	rxChar = UDR_COM;
 45c:	40 91 c6 00 	lds	r20, 0x00C6
	newMode = rxChar & 0b11000000;
 460:	84 2f       	mov	r24, r20
 462:	80 7c       	andi	r24, 0xC0	; 192
	if(newMode != 0)
 464:	d9 f0       	breq	.+54     	; 0x49c <__vector_20+0x5e>
	{
		if(newMode != extModeOld)
 466:	28 2f       	mov	r18, r24
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	80 91 04 01 	lds	r24, 0x0104
 46e:	90 91 05 01 	lds	r25, 0x0105
 472:	28 17       	cp	r18, r24
 474:	39 07       	cpc	r19, r25
 476:	29 f0       	breq	.+10     	; 0x482 <__vector_20+0x44>
		{
			modeCntr = 0;
 478:	10 92 18 01 	sts	0x0118, r1
 47c:	10 92 17 01 	sts	0x0117, r1
 480:	09 c0       	rjmp	.+18     	; 0x494 <__vector_20+0x56>
		}
		else
		{
			modeCntr++;
 482:	80 91 17 01 	lds	r24, 0x0117
 486:	90 91 18 01 	lds	r25, 0x0118
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	90 93 18 01 	sts	0x0118, r25
 490:	80 93 17 01 	sts	0x0117, r24
		}
		extModeOld = newMode;
 494:	30 93 05 01 	sts	0x0105, r19
 498:	20 93 04 01 	sts	0x0104, r18
	}
	headTmp = head;
 49c:	20 91 0c 01 	lds	r18, 0x010C
 4a0:	30 91 0d 01 	lds	r19, 0x010D
	byteArr[head++] = rxChar;
 4a4:	80 91 0c 01 	lds	r24, 0x010C
 4a8:	90 91 0d 01 	lds	r25, 0x010D
 4ac:	fc 01       	movw	r30, r24
 4ae:	ef 5c       	subi	r30, 0xCF	; 207
 4b0:	fe 4f       	sbci	r31, 0xFE	; 254
 4b2:	40 83       	st	Z, r20
 4b4:	01 96       	adiw	r24, 0x01	; 1
 4b6:	90 93 0d 01 	sts	0x010D, r25
 4ba:	80 93 0c 01 	sts	0x010C, r24
	if(head >= BUF_LEN)head = 0;
 4be:	80 91 0c 01 	lds	r24, 0x010C
 4c2:	90 91 0d 01 	lds	r25, 0x010D
 4c6:	44 97       	sbiw	r24, 0x14	; 20
 4c8:	20 f0       	brcs	.+8      	; 0x4d2 <__vector_20+0x94>
 4ca:	10 92 0d 01 	sts	0x010D, r1
 4ce:	10 92 0c 01 	sts	0x010C, r1
	if((rxChar & 0b11100000) == DIG_BEGIN)
 4d2:	84 2f       	mov	r24, r20
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	80 7e       	andi	r24, 0xE0	; 224
 4d8:	90 70       	andi	r25, 0x00	; 0
 4da:	80 38       	cpi	r24, 0x80	; 128
 4dc:	91 05       	cpc	r25, r1
 4de:	39 f4       	brne	.+14     	; 0x4ee <__vector_20+0xb0>
	{
		tail = headTmp;
 4e0:	30 93 0f 01 	sts	0x010F, r19
 4e4:	20 93 0e 01 	sts	0x010E, r18
		extMode = EXT_DIG_PASS;
 4e8:	84 e0       	ldi	r24, 0x04	; 4
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	2b c0       	rjmp	.+86     	; 0x544 <__vector_20+0x106>
		Enable_UDREIE();
	}
	else if((rxChar & 0b11100000) == DIG_END)
 4ee:	80 3a       	cpi	r24, 0xA0	; 160
 4f0:	91 05       	cpc	r25, r1
 4f2:	49 f4       	brne	.+18     	; 0x506 <__vector_20+0xc8>
	{
		if(extMode != EXT_DIG_PASS)
 4f4:	80 91 02 01 	lds	r24, 0x0102
 4f8:	90 91 03 01 	lds	r25, 0x0103
 4fc:	04 97       	sbiw	r24, 0x04	; 4
 4fe:	c9 f1       	breq	.+114    	; 0x572 <__vector_20+0x134>
		{
			extMode = EXT_DIG_FILL;
 500:	85 e0       	ldi	r24, 0x05	; 5
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	2f c0       	rjmp	.+94     	; 0x564 <__vector_20+0x126>
		else 
		{
			Enable_UDREIE();
		}
	}
	else if((rxChar & 0b11100000) == MSG_AMT_REQ_BEG)
 506:	80 34       	cpi	r24, 0x40	; 64
 508:	91 05       	cpc	r25, r1
 50a:	39 f4       	brne	.+14     	; 0x51a <__vector_20+0xdc>
	{
		tail = headTmp;
 50c:	30 93 0f 01 	sts	0x010F, r19
 510:	20 93 0e 01 	sts	0x010E, r18
		extMode = EXT_AMT_PASS;
 514:	87 e0       	ldi	r24, 0x07	; 7
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	15 c0       	rjmp	.+42     	; 0x544 <__vector_20+0x106>
		Enable_UDREIE();
	}
	else if((rxChar & 0b11100000) == MSG_AMT_REQ_END)
 51a:	80 36       	cpi	r24, 0x60	; 96
 51c:	91 05       	cpc	r25, r1
 51e:	49 f4       	brne	.+18     	; 0x532 <__vector_20+0xf4>
	{
		if(extMode != EXT_AMT_PASS)
 520:	80 91 02 01 	lds	r24, 0x0102
 524:	90 91 03 01 	lds	r25, 0x0103
 528:	07 97       	sbiw	r24, 0x07	; 7
 52a:	19 f1       	breq	.+70     	; 0x572 <__vector_20+0x134>
		{
			extMode = EXT_AMT_FILL;
 52c:	86 e0       	ldi	r24, 0x06	; 6
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	19 c0       	rjmp	.+50     	; 0x564 <__vector_20+0x126>
		else 
		{
			Enable_UDREIE();
		}
	}
	else if((rxChar & 0b11100000) == ADC_BEGIN)
 532:	80 3c       	cpi	r24, 0xC0	; 192
 534:	91 05       	cpc	r25, r1
 536:	59 f4       	brne	.+22     	; 0x54e <__vector_20+0x110>
	{
		tail = headTmp;
 538:	30 93 0f 01 	sts	0x010F, r19
 53c:	20 93 0e 01 	sts	0x010E, r18
		extMode = EXT_ADC_PASS;
 540:	88 e0       	ldi	r24, 0x08	; 8
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	90 93 03 01 	sts	0x0103, r25
 548:	80 93 02 01 	sts	0x0102, r24
 54c:	12 c0       	rjmp	.+36     	; 0x572 <__vector_20+0x134>
		Enable_UDREIE();
	}
	else if((rxChar & 0b11100000) == ADC_END)
 54e:	80 3e       	cpi	r24, 0xE0	; 224
 550:	91 05       	cpc	r25, r1
 552:	a1 f4       	brne	.+40     	; 0x57c <__vector_20+0x13e>
	{
		if(extMode != EXT_ADC_PASS)
 554:	80 91 02 01 	lds	r24, 0x0102
 558:	90 91 03 01 	lds	r25, 0x0103
 55c:	08 97       	sbiw	r24, 0x08	; 8
 55e:	49 f0       	breq	.+18     	; 0x572 <__vector_20+0x134>
		{
			extMode = EXT_ADC_FILL;
 560:	89 e0       	ldi	r24, 0x09	; 9
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	90 93 03 01 	sts	0x0103, r25
 568:	80 93 02 01 	sts	0x0102, r24
			TOKEN_FLAG = 0;
 56c:	10 92 19 01 	sts	0x0119, r1
 570:	05 c0       	rjmp	.+10     	; 0x57c <__vector_20+0x13e>
}

void Enable_UDREIE()
{
#ifdef __AVR_ATmega1284P__
UCSRB_COM |= (1<<UDRIE0);
 572:	80 91 c1 00 	lds	r24, 0x00C1
 576:	80 62       	ori	r24, 0x20	; 32
 578:	80 93 c1 00 	sts	0x00C1, r24
		rxChar = UDR_COM;
		byteArr[head++] = rxChar;
		if(head >= BUF_LEN) head = 0;
	}
	*/
	if(DiffHeadTail(head, tail) < (10))
 57c:	20 91 0c 01 	lds	r18, 0x010C
 580:	30 91 0d 01 	lds	r19, 0x010D
 584:	80 91 0e 01 	lds	r24, 0x010E
 588:	90 91 0f 01 	lds	r25, 0x010F
	}
}

unsigned int DiffHeadTail(unsigned int headC, unsigned int tailC)
{
	if(headC > tailC) return (headC - tailC);
 58c:	82 17       	cp	r24, r18
 58e:	93 07       	cpc	r25, r19
 590:	28 f4       	brcc	.+10     	; 0x59c <__vector_20+0x15e>
 592:	a9 01       	movw	r20, r18
 594:	48 1b       	sub	r20, r24
 596:	59 0b       	sbc	r21, r25
 598:	ca 01       	movw	r24, r20
 59a:	05 c0       	rjmp	.+10     	; 0x5a6 <__vector_20+0x168>
	else if(headC < tailC)return (tailC - headC);
 59c:	28 17       	cp	r18, r24
 59e:	39 07       	cpc	r19, r25
 5a0:	20 f4       	brcc	.+8      	; 0x5aa <__vector_20+0x16c>
 5a2:	82 1b       	sub	r24, r18
 5a4:	93 0b       	sbc	r25, r19
		rxChar = UDR_COM;
		byteArr[head++] = rxChar;
		if(head >= BUF_LEN) head = 0;
	}
	*/
	if(DiffHeadTail(head, tail) < (10))
 5a6:	0a 97       	sbiw	r24, 0x0a	; 10
 5a8:	18 f4       	brcc	.+6      	; 0x5b0 <__vector_20+0x172>
	{
		DDRD &= ~RTS;
 5aa:	54 98       	cbi	0x0a, 4	; 10
}

void Enable_ExtInt()
{
#ifdef __AVR_ATmega1284P__
EIFR |= 0b00000001;
 5ac:	e0 9a       	sbi	0x1c, 0	; 28
EIMSK |= 0b00000001;
 5ae:	e8 9a       	sbi	0x1d, 0	; 29
	{
		DDRD &= ~RTS;
		Enable_ExtInt();
	}

}
 5b0:	ff 91       	pop	r31
 5b2:	ef 91       	pop	r30
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	5f 91       	pop	r21
 5ba:	4f 91       	pop	r20
 5bc:	3f 91       	pop	r19
 5be:	2f 91       	pop	r18
 5c0:	0f 90       	pop	r0
 5c2:	0b be       	out	0x3b, r0	; 59
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

000005ce <__vector_21>:


SIGNAL (USART_UDRE_vect_COM)
{ 
 5ce:	1f 92       	push	r1
 5d0:	0f 92       	push	r0
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	0f 92       	push	r0
 5d6:	0b b6       	in	r0, 0x3b	; 59
 5d8:	0f 92       	push	r0
 5da:	11 24       	eor	r1, r1
 5dc:	2f 93       	push	r18
 5de:	3f 93       	push	r19
 5e0:	8f 93       	push	r24
 5e2:	9f 93       	push	r25
 5e4:	ef 93       	push	r30
 5e6:	ff 93       	push	r31
	CTS:  PD3 // Clear to send 	-> input
*/

char IsCtsFtee()
{ 
	if((PIND & CTS) == CTS) 
 5e8:	4b 9b       	sbis	0x09, 3	; 9
 5ea:	a5 c0       	rjmp	.+330    	; 0x736 <__vector_21+0x168>
{ 
char tmpTxChar;

	if(IsCtsFtee() == CTS_FREE)
	{
		if(extMode == EXT_DIG_PASS)
 5ec:	80 91 02 01 	lds	r24, 0x0102
 5f0:	90 91 03 01 	lds	r25, 0x0103
 5f4:	04 97       	sbiw	r24, 0x04	; 4
 5f6:	91 f4       	brne	.+36     	; 0x61c <__vector_21+0x4e>
		{
			tmpTxChar = byteArr[tail++];
 5f8:	80 91 0e 01 	lds	r24, 0x010E
 5fc:	90 91 0f 01 	lds	r25, 0x010F
 600:	fc 01       	movw	r30, r24
 602:	ef 5c       	subi	r30, 0xCF	; 207
 604:	fe 4f       	sbci	r31, 0xFE	; 254
 606:	e0 81       	ld	r30, Z
 608:	01 96       	adiw	r24, 0x01	; 1
 60a:	90 93 0f 01 	sts	0x010F, r25
 60e:	80 93 0e 01 	sts	0x010E, r24
			if(tmpTxChar & 0b00100000)
 612:	e5 ff       	sbrs	r30, 5
 614:	3f c0       	rjmp	.+126    	; 0x694 <__vector_21+0xc6>
			{
				extMode = EXT_DIG_FILL;
 616:	85 e0       	ldi	r24, 0x05	; 5
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	2f c0       	rjmp	.+94     	; 0x67a <__vector_21+0xac>
			if(head == tail)
			{
				Disable_UDREIE();
			}
		}
		else if(extMode == EXT_AMT_PASS)
 61c:	80 91 02 01 	lds	r24, 0x0102
 620:	90 91 03 01 	lds	r25, 0x0103
 624:	07 97       	sbiw	r24, 0x07	; 7
 626:	91 f4       	brne	.+36     	; 0x64c <__vector_21+0x7e>
		{
			tmpTxChar = byteArr[tail++];
 628:	80 91 0e 01 	lds	r24, 0x010E
 62c:	90 91 0f 01 	lds	r25, 0x010F
 630:	fc 01       	movw	r30, r24
 632:	ef 5c       	subi	r30, 0xCF	; 207
 634:	fe 4f       	sbci	r31, 0xFE	; 254
 636:	e0 81       	ld	r30, Z
 638:	01 96       	adiw	r24, 0x01	; 1
 63a:	90 93 0f 01 	sts	0x010F, r25
 63e:	80 93 0e 01 	sts	0x010E, r24
			if(tmpTxChar & 0b00100000)
 642:	e5 ff       	sbrs	r30, 5
 644:	27 c0       	rjmp	.+78     	; 0x694 <__vector_21+0xc6>
			{
				extMode = EXT_AMT_FILL;
 646:	86 e0       	ldi	r24, 0x06	; 6
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	17 c0       	rjmp	.+46     	; 0x67a <__vector_21+0xac>
			if(head == tail)
			{
				Disable_UDREIE();
			}
		}
		else if(extMode == EXT_ADC_PASS)
 64c:	80 91 02 01 	lds	r24, 0x0102
 650:	90 91 03 01 	lds	r25, 0x0103
 654:	08 97       	sbiw	r24, 0x08	; 8
 656:	b1 f5       	brne	.+108    	; 0x6c4 <__vector_21+0xf6>
		{
			tmpTxChar = byteArr[tail++];
 658:	80 91 0e 01 	lds	r24, 0x010E
 65c:	90 91 0f 01 	lds	r25, 0x010F
 660:	fc 01       	movw	r30, r24
 662:	ef 5c       	subi	r30, 0xCF	; 207
 664:	fe 4f       	sbci	r31, 0xFE	; 254
 666:	e0 81       	ld	r30, Z
 668:	01 96       	adiw	r24, 0x01	; 1
 66a:	90 93 0f 01 	sts	0x010F, r25
 66e:	80 93 0e 01 	sts	0x010E, r24
			if(tmpTxChar & 0b00100000)
 672:	e5 ff       	sbrs	r30, 5
 674:	0f c0       	rjmp	.+30     	; 0x694 <__vector_21+0xc6>
			{
				extMode = EXT_ADC_FILL;
 676:	89 e0       	ldi	r24, 0x09	; 9
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	90 93 03 01 	sts	0x0103, r25
 67e:	80 93 02 01 	sts	0x0102, r24
				TOKEN_FLAG = 1;
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	80 93 19 01 	sts	0x0119, r24
				tmpTxChar &= 0b00011111;
 688:	ef 71       	andi	r30, 0x1F	; 31
}

void Disable_UDREIE()
{
#ifdef __AVR_ATmega1284P__
UCSRB_COM &= ~(1<<UDRIE0);
 68a:	80 91 c1 00 	lds	r24, 0x00C1
 68e:	8f 7d       	andi	r24, 0xDF	; 223
 690:	80 93 c1 00 	sts	0x00C1, r24
				TOKEN_FLAG = 1;
				tmpTxChar &= 0b00011111;
				Disable_UDREIE();
			}
			
			UDR_COM = tmpTxChar;
 694:	e0 93 c6 00 	sts	0x00C6, r30
			if(tail >= BUF_LEN)tail = 0;
 698:	80 91 0e 01 	lds	r24, 0x010E
 69c:	90 91 0f 01 	lds	r25, 0x010F
 6a0:	44 97       	sbiw	r24, 0x14	; 20
 6a2:	20 f0       	brcs	.+8      	; 0x6ac <__vector_21+0xde>
 6a4:	10 92 0f 01 	sts	0x010F, r1
 6a8:	10 92 0e 01 	sts	0x010E, r1
			if(head == tail)
 6ac:	20 91 0c 01 	lds	r18, 0x010C
 6b0:	30 91 0d 01 	lds	r19, 0x010D
 6b4:	80 91 0e 01 	lds	r24, 0x010E
 6b8:	90 91 0f 01 	lds	r25, 0x010F
 6bc:	28 17       	cp	r18, r24
 6be:	39 07       	cpc	r19, r25
 6c0:	d1 f5       	brne	.+116    	; 0x736 <__vector_21+0x168>
 6c2:	34 c0       	rjmp	.+104    	; 0x72c <__vector_21+0x15e>
				Disable_UDREIE();
			}
		}
		else
		{
			UDR_COM = byteSendArr[byteCntr++];
 6c4:	80 91 00 01 	lds	r24, 0x0100
 6c8:	90 91 01 01 	lds	r25, 0x0101
 6cc:	fc 01       	movw	r30, r24
 6ce:	eb 5b       	subi	r30, 0xBB	; 187
 6d0:	fe 4f       	sbci	r31, 0xFE	; 254
 6d2:	20 81       	ld	r18, Z
 6d4:	20 93 c6 00 	sts	0x00C6, r18
 6d8:	01 96       	adiw	r24, 0x01	; 1
 6da:	90 93 01 01 	sts	0x0101, r25
 6de:	80 93 00 01 	sts	0x0100, r24
		
			if(extMode == EXT_DIG_REQ)
 6e2:	80 91 02 01 	lds	r24, 0x0102
 6e6:	90 91 03 01 	lds	r25, 0x0103
 6ea:	89 2b       	or	r24, r25
 6ec:	99 f0       	breq	.+38     	; 0x714 <__vector_21+0x146>
				{
					extMode = EXT_IDLE;
					Disable_UDREIE();
				}
			}
			else if(extMode == EXT_ADC_REQ)
 6ee:	80 91 02 01 	lds	r24, 0x0102
 6f2:	90 91 03 01 	lds	r25, 0x0103
 6f6:	01 97       	sbiw	r24, 0x01	; 1
 6f8:	39 f4       	brne	.+14     	; 0x708 <__vector_21+0x13a>
			{
				if(byteCntr == 8)
 6fa:	80 91 00 01 	lds	r24, 0x0100
 6fe:	90 91 01 01 	lds	r25, 0x0101
 702:	08 97       	sbiw	r24, 0x08	; 8
 704:	c1 f4       	brne	.+48     	; 0x736 <__vector_21+0x168>
 706:	0c c0       	rjmp	.+24     	; 0x720 <__vector_21+0x152>
				{
					extMode = EXT_IDLE;
					Disable_UDREIE();
				}
			}
			else if(extMode == EXT_INIT)
 708:	80 91 02 01 	lds	r24, 0x0102
 70c:	90 91 03 01 	lds	r25, 0x0103
 710:	02 97       	sbiw	r24, 0x02	; 2
 712:	89 f4       	brne	.+34     	; 0x736 <__vector_21+0x168>
			{
		
				if(byteCntr == 2)
 714:	80 91 00 01 	lds	r24, 0x0100
 718:	90 91 01 01 	lds	r25, 0x0101
 71c:	02 97       	sbiw	r24, 0x02	; 2
 71e:	59 f4       	brne	.+22     	; 0x736 <__vector_21+0x168>
				{
			
					extMode = EXT_IDLE;
 720:	83 e0       	ldi	r24, 0x03	; 3
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	90 93 03 01 	sts	0x0103, r25
 728:	80 93 02 01 	sts	0x0102, r24
}

void Disable_UDREIE()
{
#ifdef __AVR_ATmega1284P__
UCSRB_COM &= ~(1<<UDRIE0);
 72c:	80 91 c1 00 	lds	r24, 0x00C1
 730:	8f 7d       	andi	r24, 0xDF	; 223
 732:	80 93 c1 00 	sts	0x00C1, r24
					Disable_UDREIE();
				}
			}
		}
	}
}
 736:	ff 91       	pop	r31
 738:	ef 91       	pop	r30
 73a:	9f 91       	pop	r25
 73c:	8f 91       	pop	r24
 73e:	3f 91       	pop	r19
 740:	2f 91       	pop	r18
 742:	0f 90       	pop	r0
 744:	0b be       	out	0x3b, r0	; 59
 746:	0f 90       	pop	r0
 748:	0f be       	out	0x3f, r0	; 63
 74a:	0f 90       	pop	r0
 74c:	1f 90       	pop	r1
 74e:	18 95       	reti

00000750 <_exit>:
 750:	f8 94       	cli

00000752 <__stop_program>:
 752:	ff cf       	rjmp	.-2      	; 0x752 <__stop_program>

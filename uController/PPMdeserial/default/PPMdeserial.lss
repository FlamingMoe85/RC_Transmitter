
PPMdeserial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001a  00800060  00800060  000001f0  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000b1  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000160  00000000  00000000  000002c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000009a  00000000  00000000  00000421  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000015a  00000000  00000000  000004bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  00000618  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ed  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__vector_5>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	aa 37       	cpi	r26, 0x7A	; 122
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	99 c0       	rjmp	.+306    	; 0x178 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:


int main(void)
{ 

TCCR1B = 0b01000010;
  48:	82 e4       	ldi	r24, 0x42	; 66
  4a:	8e bd       	out	0x2e, r24	; 46
TIMSK = 0b00100000; // Input Capture Interrupt
  4c:	80 e2       	ldi	r24, 0x20	; 32
  4e:	89 bf       	out	0x39, r24	; 57

DDRB = 0b01111110;
  50:	8e e7       	ldi	r24, 0x7E	; 126
  52:	87 bb       	out	0x17, r24	; 23
sei();
  54:	78 94       	sei
  56:	ff cf       	rjmp	.-2      	; 0x56 <main+0xe>

00000058 <__vector_5>:
}

}

SIGNAL (TIMER1_CAPT_vect)
{
  58:	1f 92       	push	r1
  5a:	0f 92       	push	r0
  5c:	0f b6       	in	r0, 0x3f	; 63
  5e:	0f 92       	push	r0
  60:	11 24       	eor	r1, r1
  62:	2f 93       	push	r18
  64:	3f 93       	push	r19
  66:	8f 93       	push	r24
  68:	9f 93       	push	r25
	ticksEnd = ICR1;
  6a:	86 b5       	in	r24, 0x26	; 38
  6c:	97 b5       	in	r25, 0x27	; 39
  6e:	90 93 61 00 	sts	0x0061, r25
  72:	80 93 60 00 	sts	0x0060, r24
	
	PORTB = nextPinMask;
  76:	80 91 6a 00 	lds	r24, 0x006A
  7a:	88 bb       	out	0x18, r24	; 24

	if(pulseCntr == 0)	
  7c:	80 91 66 00 	lds	r24, 0x0066
  80:	88 23       	and	r24, r24
  82:	11 f4       	brne	.+4      	; 0x88 <__vector_5+0x30>
	{
		nextPinMask = 8;
  84:	88 e0       	ldi	r24, 0x08	; 8
  86:	28 c0       	rjmp	.+80     	; 0xd8 <__vector_5+0x80>
	}
	else if(pulseCntr == 1)
  88:	80 91 66 00 	lds	r24, 0x0066
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	11 f4       	brne	.+4      	; 0x94 <__vector_5+0x3c>
	{
		nextPinMask = 16;
  90:	80 e1       	ldi	r24, 0x10	; 16
  92:	22 c0       	rjmp	.+68     	; 0xd8 <__vector_5+0x80>
	}
	else if(pulseCntr == 2)
  94:	80 91 66 00 	lds	r24, 0x0066
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	11 f4       	brne	.+4      	; 0xa0 <__vector_5+0x48>
	{
		nextPinMask = 32;
  9c:	80 e2       	ldi	r24, 0x20	; 32
  9e:	1c c0       	rjmp	.+56     	; 0xd8 <__vector_5+0x80>
	}
	else if(pulseCntr == 3)
  a0:	80 91 66 00 	lds	r24, 0x0066
  a4:	83 30       	cpi	r24, 0x03	; 3
  a6:	11 f4       	brne	.+4      	; 0xac <__vector_5+0x54>
	{
		nextPinMask = 64;
  a8:	80 e4       	ldi	r24, 0x40	; 64
  aa:	16 c0       	rjmp	.+44     	; 0xd8 <__vector_5+0x80>
	}	
	else if(pulseCntr == 4)
  ac:	80 91 66 00 	lds	r24, 0x0066
  b0:	84 30       	cpi	r24, 0x04	; 4
  b2:	21 f0       	breq	.+8      	; 0xbc <__vector_5+0x64>
	{
	
		nextPinMask = 0;
	}	
	else if(pulseCntr == 5)
  b4:	80 91 66 00 	lds	r24, 0x0066
  b8:	85 30       	cpi	r24, 0x05	; 5
  ba:	19 f4       	brne	.+6      	; 0xc2 <__vector_5+0x6a>
	{
	
		nextPinMask = 0;
  bc:	10 92 6a 00 	sts	0x006A, r1
  c0:	0d c0       	rjmp	.+26     	; 0xdc <__vector_5+0x84>
	}	
	else if(pulseCntr == 6)
  c2:	80 91 66 00 	lds	r24, 0x0066
  c6:	86 30       	cpi	r24, 0x06	; 6
  c8:	11 f4       	brne	.+4      	; 0xce <__vector_5+0x76>
	{
	
		nextPinMask = 2;
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	05 c0       	rjmp	.+10     	; 0xd8 <__vector_5+0x80>
	}	
	else if(pulseCntr == 7)
  ce:	80 91 66 00 	lds	r24, 0x0066
  d2:	87 30       	cpi	r24, 0x07	; 7
  d4:	19 f4       	brne	.+6      	; 0xdc <__vector_5+0x84>
	{
	
		nextPinMask = 4;
  d6:	84 e0       	ldi	r24, 0x04	; 4
  d8:	80 93 6a 00 	sts	0x006A, r24
	}

	if(ticksEnd > ticksStart)
  dc:	20 91 60 00 	lds	r18, 0x0060
  e0:	30 91 61 00 	lds	r19, 0x0061
  e4:	80 91 62 00 	lds	r24, 0x0062
  e8:	90 91 63 00 	lds	r25, 0x0063
  ec:	82 17       	cp	r24, r18
  ee:	93 07       	cpc	r25, r19
  f0:	58 f4       	brcc	.+22     	; 0x108 <__vector_5+0xb0>
	{
		pulseLength = ticksEnd - ticksStart;
  f2:	80 91 60 00 	lds	r24, 0x0060
  f6:	90 91 61 00 	lds	r25, 0x0061
  fa:	20 91 62 00 	lds	r18, 0x0062
  fe:	30 91 63 00 	lds	r19, 0x0063
 102:	82 1b       	sub	r24, r18
 104:	93 0b       	sbc	r25, r19
 106:	0c c0       	rjmp	.+24     	; 0x120 <__vector_5+0xc8>
	}
	else
	{
		pulseLength = 65535 - ticksStart + ticksEnd;
 108:	80 91 62 00 	lds	r24, 0x0062
 10c:	90 91 63 00 	lds	r25, 0x0063
 110:	20 91 60 00 	lds	r18, 0x0060
 114:	30 91 61 00 	lds	r19, 0x0061
 118:	80 95       	com	r24
 11a:	90 95       	com	r25
 11c:	82 0f       	add	r24, r18
 11e:	93 1f       	adc	r25, r19
 120:	90 93 65 00 	sts	0x0065, r25
 124:	80 93 64 00 	sts	0x0064, r24
	}



	if(pulseLength > 3000)
 128:	80 91 64 00 	lds	r24, 0x0064
 12c:	90 91 65 00 	lds	r25, 0x0065
 130:	89 5b       	subi	r24, 0xB9	; 185
 132:	9b 40       	sbci	r25, 0x0B	; 11
 134:	58 f0       	brcs	.+22     	; 0x14c <__vector_5+0xf4>
	{
		pulseCntr = 0;
 136:	10 92 66 00 	sts	0x0066, r1
		periodCnt++;
 13a:	80 91 67 00 	lds	r24, 0x0067
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	80 93 67 00 	sts	0x0067, r24
		logOn = 1;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 69 00 	sts	0x0069, r24
 14a:	05 c0       	rjmp	.+10     	; 0x156 <__vector_5+0xfe>
	}
	else 
	{
		//channel[pulseCntr] = pulseLength;
		pulseCntr++;
 14c:	80 91 66 00 	lds	r24, 0x0066
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	80 93 66 00 	sts	0x0066, r24
	}
		
	ticksStart = ticksEnd;
 156:	80 91 60 00 	lds	r24, 0x0060
 15a:	90 91 61 00 	lds	r25, 0x0061
 15e:	90 93 63 00 	sts	0x0063, r25
 162:	80 93 62 00 	sts	0x0062, r24
}
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	3f 91       	pop	r19
 16c:	2f 91       	pop	r18
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>

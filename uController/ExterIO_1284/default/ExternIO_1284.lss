
ExternIO_1284.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000003a8  0000043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800102  00800102  0000043e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000043e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000155  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000031d  00000000  00000000  000005b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000018b  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000373  00000000  00000000  00000a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00000dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000168  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__vector_2>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_20>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_22>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ea       	ldi	r30, 0xA8	; 168
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 31       	cpi	r26, 0x1C	; 28
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 1a 01 	call	0x234	; 0x234 <main>
  c6:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <SendByteCntr>:
#define SIG_BUSY 0b00010000

/**/

void SendByteCntr(char val)
{ 
  ce:	98 2f       	mov	r25, r24
	while ( !( UCSR0A & (1<<UDRE0)) );
  d0:	80 91 c0 00 	lds	r24, 0x00C0
  d4:	85 ff       	sbrs	r24, 5
  d6:	fc cf       	rjmp	.-8      	; 0xd0 <SendByteCntr+0x2>
	UDR0 = val;
  d8:	90 93 c6 00 	sts	0x00C6, r25
	while ( !( UCSR0A & (1<<UDRE0)) );
  dc:	80 91 c0 00 	lds	r24, 0x00C0
  e0:	85 ff       	sbrs	r24, 5
  e2:	fc cf       	rjmp	.-8      	; 0xdc <SendByteCntr+0xe>

} 
  e4:	08 95       	ret

000000e6 <GetTick>:

char GetTick()
{
	static unsigned int c1 = 0, c2 = 0;
	c1++;
  e6:	80 91 0e 01 	lds	r24, 0x010E
  ea:	90 91 0f 01 	lds	r25, 0x010F
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	90 93 0f 01 	sts	0x010F, r25
  f4:	80 93 0e 01 	sts	0x010E, r24
	if(c1 >= 1000)
  f8:	88 5e       	subi	r24, 0xE8	; 232
  fa:	93 40       	sbci	r25, 0x03	; 3
  fc:	68 f0       	brcs	.+26     	; 0x118 <GetTick+0x32>
	{
		c1 = 0;
  fe:	10 92 0f 01 	sts	0x010F, r1
 102:	10 92 0e 01 	sts	0x010E, r1
		c2++; 
 106:	80 91 0c 01 	lds	r24, 0x010C
 10a:	90 91 0d 01 	lds	r25, 0x010D
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	90 93 0d 01 	sts	0x010D, r25
 114:	80 93 0c 01 	sts	0x010C, r24
	} 
	if(c2 >= 80)
 118:	80 91 0c 01 	lds	r24, 0x010C
 11c:	90 91 0d 01 	lds	r25, 0x010D
 120:	80 35       	cpi	r24, 0x50	; 80
 122:	91 05       	cpc	r25, r1
 124:	10 f4       	brcc	.+4      	; 0x12a <GetTick+0x44>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 95       	ret
	{
		c2 = 0; 
 12a:	10 92 0d 01 	sts	0x010D, r1
 12e:	10 92 0c 01 	sts	0x010C, r1
 132:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
 134:	08 95       	ret

00000136 <SignalCapa>:

void SignalCapa(char sig)
{
	if(sig == RX_FREE)
 136:	88 23       	and	r24, r24
 138:	21 f4       	brne	.+8      	; 0x142 <SignalCapa+0xc>
	{
		
		freeState = 1;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	80 93 0b 01 	sts	0x010B, r24
 140:	08 95       	ret
		//DDRD &= ~(0b00001000);  
		}
	else
	{ 
		DDRD |= SIG_BUSY; 
 142:	54 9a       	sbi	0x0a, 4	; 10
 144:	08 95       	ret

00000146 <GET_RX_STATE>:
	}
}

char GET_RX_STATE()
{ 
	if((PIND & TX_FREE) == TX_FREE) return RX_FREE;
 146:	89 b1       	in	r24, 0x09	; 9
 148:	86 95       	lsr	r24
 14a:	86 95       	lsr	r24
 14c:	86 95       	lsr	r24
 14e:	80 95       	com	r24
	else return RX_BUSY;
}
 150:	81 70       	andi	r24, 0x01	; 1
 152:	08 95       	ret

00000154 <UartRx>:

void UartRx()
{
char tmpChar;
	
rxFlag = 0;
 154:	10 92 03 01 	sts	0x0103, r1

 	
	tmpChar = UDR0;
 158:	20 91 c6 00 	lds	r18, 0x00C6
	byteArr[head++] = tmpChar;
 15c:	80 91 07 01 	lds	r24, 0x0107
 160:	90 91 08 01 	lds	r25, 0x0108
 164:	fc 01       	movw	r30, r24
 166:	ef 5e       	subi	r30, 0xEF	; 239
 168:	fe 4f       	sbci	r31, 0xFE	; 254
 16a:	20 83       	st	Z, r18
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	90 93 08 01 	sts	0x0108, r25
 172:	80 93 07 01 	sts	0x0107, r24
	
	if(head == 2) head = 0;
 176:	80 91 07 01 	lds	r24, 0x0107
 17a:	90 91 08 01 	lds	r25, 0x0108
 17e:	02 97       	sbiw	r24, 0x02	; 2
 180:	21 f4       	brne	.+8      	; 0x18a <UartRx+0x36>
 182:	10 92 08 01 	sts	0x0108, r1
 186:	10 92 07 01 	sts	0x0107, r1
	byteCntr++;
 18a:	80 91 02 01 	lds	r24, 0x0102
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	80 93 02 01 	sts	0x0102, r24
	if((UCSR0A & 0b10000000) == 128)
 194:	80 91 c0 00 	lds	r24, 0x00C0
 198:	87 ff       	sbrs	r24, 7
 19a:	1e c0       	rjmp	.+60     	; 0x1d8 <UartRx+0x84>
	{ 
		tmpChar = UDR0;
 19c:	20 91 c6 00 	lds	r18, 0x00C6
		byteArr[head++] = tmpChar; 
 1a0:	80 91 07 01 	lds	r24, 0x0107
 1a4:	90 91 08 01 	lds	r25, 0x0108
 1a8:	fc 01       	movw	r30, r24
 1aa:	ef 5e       	subi	r30, 0xEF	; 239
 1ac:	fe 4f       	sbci	r31, 0xFE	; 254
 1ae:	20 83       	st	Z, r18
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	90 93 08 01 	sts	0x0108, r25
 1b6:	80 93 07 01 	sts	0x0107, r24
		if(head == 2) head = 0;
 1ba:	80 91 07 01 	lds	r24, 0x0107
 1be:	90 91 08 01 	lds	r25, 0x0108
 1c2:	02 97       	sbiw	r24, 0x02	; 2
 1c4:	21 f4       	brne	.+8      	; 0x1ce <UartRx+0x7a>
 1c6:	10 92 08 01 	sts	0x0108, r1
 1ca:	10 92 07 01 	sts	0x0107, r1
		byteCntr++;
 1ce:	80 91 02 01 	lds	r24, 0x0102
 1d2:	8f 5f       	subi	r24, 0xFF	; 255
 1d4:	80 93 02 01 	sts	0x0102, r24
    }  

	//currently only use of one expander which is trigegred by an 'a', 
	// so the following is ok
	byteCntr = 0;
 1d8:	10 92 02 01 	sts	0x0102, r1
}
 1dc:	08 95       	ret

000001de <Send>:
void Send()
{
	

	//if(byteCntr > 0)
	if(byteCntr < 8)
 1de:	80 91 02 01 	lds	r24, 0x0102
 1e2:	88 30       	cpi	r24, 0x08	; 8
 1e4:	e0 f4       	brcc	.+56     	; 0x21e <Send+0x40>
 	{
	

// 		if((GET_RX_STATE() == RX_FREE) && ((UCSR0A & 64)==0))
		if((UCSR0A & 64)==0)
 1e6:	80 91 c0 00 	lds	r24, 0x00C0
 1ea:	86 fd       	sbrc	r24, 6
 1ec:	18 c0       	rjmp	.+48     	; 0x21e <Send+0x40>
 		{ 
			
				PORTC |= 0b00100000;
 1ee:	45 9a       	sbi	0x08, 5	; 8
 			 	UDR0 = byteSendArr[byteCntr];
 1f0:	e0 91 02 01 	lds	r30, 0x0102
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	ed 5e       	subi	r30, 0xED	; 237
 1f8:	fe 4f       	sbci	r31, 0xFE	; 254
 1fa:	80 81       	ld	r24, Z
 1fc:	80 93 c6 00 	sts	0x00C6, r24

		 	if(tail == 2) tail = 0;
 200:	80 91 09 01 	lds	r24, 0x0109
 204:	90 91 0a 01 	lds	r25, 0x010A
 208:	02 97       	sbiw	r24, 0x02	; 2
 20a:	21 f4       	brne	.+8      	; 0x214 <Send+0x36>
 20c:	10 92 0a 01 	sts	0x010A, r1
 210:	10 92 09 01 	sts	0x0109, r1
			//byteCntr--; 
			byteCntr++;
 214:	80 91 02 01 	lds	r24, 0x0102
 218:	8f 5f       	subi	r24, 0xFF	; 255
 21a:	80 93 02 01 	sts	0x0102, r24
		 }  
		 
 	}  
	if(byteCntr == 8)SignalCapa(RX_FREE);
 21e:	80 91 02 01 	lds	r24, 0x0102
 222:	88 30       	cpi	r24, 0x08	; 8
 224:	19 f4       	brne	.+6      	; 0x22c <Send+0x4e>
void SignalCapa(char sig)
{
	if(sig == RX_FREE)
	{
		
		freeState = 1;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	80 93 0b 01 	sts	0x010B, r24
 22c:	08 95       	ret

0000022e <UartTx>:
	if(byteCntr == 8)SignalCapa(RX_FREE);
}

void UartTx()
{
txFlag = 0;
 22e:	10 92 04 01 	sts	0x0104, r1

	//void Send();
}
 232:	08 95       	ret

00000234 <main>:



int main(void)
{ 
 234:	ef 92       	push	r14
 236:	ff 92       	push	r15
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17


/* Set baud rate  for 9600 Baud*/
UBRR0H = (unsigned char)(0);
 23c:	10 92 c5 00 	sts	0x00C5, r1
UBRR0L = (unsigned char)52;
 240:	84 e3       	ldi	r24, 0x34	; 52
 242:	80 93 c4 00 	sts	0x00C4, r24
/* Enable receiver and transmitter */
UCSR0B = (1<<7)|(1<<6)|(1<<RXEN0)|(1<<TXEN0);//
 246:	88 ed       	ldi	r24, 0xD8	; 216
 248:	80 93 c1 00 	sts	0x00C1, r24
//UCSR0B = (1<<RXEN0);
/* Set frame format: 8data, 2stop bit */
UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 24c:	8e e0       	ldi	r24, 0x0E	; 14
 24e:	80 93 c2 00 	sts	0x00C2, r24
 
DDRD = 0b01000010;
 252:	82 e4       	ldi	r24, 0x42	; 66
 254:	8a b9       	out	0x0a, r24	; 10
PORTD = TX_FREE;
 256:	88 e0       	ldi	r24, 0x08	; 8
 258:	8b b9       	out	0x0b, r24	; 11

EICRA = 0b00001000;
 25a:	80 93 69 00 	sts	0x0069, r24
EIFR = 0b00000010;
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	8c bb       	out	0x1c, r24	; 28
EIMSK = 0b00000010;
 262:	8d bb       	out	0x1d, r24	; 29
//sei(); 

 
 //PORTD |= 0b01000000;

 sei(); 
 264:	78 94       	sei

PORTC = 0b11111111;
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	88 b9       	out	0x08, r24	; 8
//		PORTD = 64;
	}
}
 
	switchBits = (PINC ^ 0b11111111);
	byteSendArr[0] = 128;
 26a:	90 e8       	ldi	r25, 0x80	; 128
 26c:	e9 2e       	mov	r14, r25
	byteSendArr[1] |= (switchBits & 3);

	byteSendArr[2] = 0;
	byteSendArr[3] = 0;

	byteSendArr[4] = 42;
 26e:	1a e2       	ldi	r17, 0x2A	; 42
	byteSendArr[5] = 42;

	byteSendArr[6] = 32;
 270:	80 e2       	ldi	r24, 0x20	; 32
 272:	f8 2e       	mov	r15, r24
	byteSendArr[7] = 0+64;
 274:	00 e4       	ldi	r16, 0x40	; 64

PORTC = 0b11111111;
while(1)
{ 

if(GetTick())
 276:	0e 94 73 00 	call	0xe6	; 0xe6 <GetTick>
 27a:	81 11       	cpse	r24, r1
{
	if((PIND & 0b01000000) == 64)
 27c:	89 b1       	in	r24, 0x09	; 9
	{
//		PORTD = 64;
	}
}
 
	switchBits = (PINC ^ 0b11111111);
 27e:	26 b1       	in	r18, 0x06	; 6
 280:	20 95       	com	r18
 282:	20 93 1b 01 	sts	0x011B, r18
	byteSendArr[0] = 128;
 286:	e0 92 13 01 	sts	0x0113, r14
	byteSendArr[0] |= (switchBits >> 2);
 28a:	90 91 13 01 	lds	r25, 0x0113
 28e:	82 2f       	mov	r24, r18
 290:	86 95       	lsr	r24
 292:	86 95       	lsr	r24
 294:	89 2b       	or	r24, r25
 296:	80 93 13 01 	sts	0x0113, r24
	byteSendArr[1] = 0;
 29a:	10 92 14 01 	sts	0x0114, r1
	byteSendArr[1] |= (switchBits & 3);
 29e:	90 91 14 01 	lds	r25, 0x0114
 2a2:	82 2f       	mov	r24, r18
 2a4:	83 70       	andi	r24, 0x03	; 3
 2a6:	89 2b       	or	r24, r25
 2a8:	80 93 14 01 	sts	0x0114, r24

	byteSendArr[2] = 0;
 2ac:	10 92 15 01 	sts	0x0115, r1
	byteSendArr[3] = 0;
 2b0:	10 92 16 01 	sts	0x0116, r1

	byteSendArr[4] = 42;
 2b4:	10 93 17 01 	sts	0x0117, r17
	byteSendArr[5] = 42;
 2b8:	10 93 18 01 	sts	0x0118, r17

	byteSendArr[6] = 32;
 2bc:	f0 92 19 01 	sts	0x0119, r15
	byteSendArr[7] = 0+64;
 2c0:	00 93 1a 01 	sts	0x011A, r16

	if(switchBits == 16)
 2c4:	20 31       	cpi	r18, 0x10	; 16
 2c6:	11 f4       	brne	.+4      	; 0x2cc <main+0x98>
	{
		PORTD |= 64;
 2c8:	5e 9a       	sbi	0x0b, 6	; 11
 2ca:	01 c0       	rjmp	.+2      	; 0x2ce <main+0x9a>
	}
	else
	{
		PORTD = PORTD & ~(64);
 2cc:	5e 98       	cbi	0x0b, 6	; 11
	}

	Send();   
 2ce:	0e 94 ef 00 	call	0x1de	; 0x1de <Send>

	if(rxFlag == 1)UartRx();
 2d2:	80 91 03 01 	lds	r24, 0x0103
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	11 f4       	brne	.+4      	; 0x2de <main+0xaa>
 2da:	0e 94 aa 00 	call	0x154	; 0x154 <UartRx>
	if(txFlag == 1)UartTx();
 2de:	80 91 04 01 	lds	r24, 0x0104
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	41 f6       	brne	.-112    	; 0x276 <main+0x42>
	if(byteCntr == 8)SignalCapa(RX_FREE);
}

void UartTx()
{
txFlag = 0;
 2e6:	10 92 04 01 	sts	0x0104, r1
 2ea:	c5 cf       	rjmp	.-118    	; 0x276 <main+0x42>

000002ec <__vector_2>:
}
}//main

/**/
SIGNAL (INT1_vect)
{
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
	DDRD |= SIG_BUSY;
 2f6:	54 9a       	sbi	0x0a, 4	; 10
	EIMSK = 0b00000000;
 2f8:	1d ba       	out	0x1d, r1	; 29

}
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <__vector_20>:

SIGNAL (USART0_RX_vect)//TIMER1_COMPA_vect) 
{ 
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	0b b6       	in	r0, 0x3b	; 59
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	2f 93       	push	r18
 314:	8f 93       	push	r24
 316:	9f 93       	push	r25
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
	//SignalCapa(RX_BUSY); 
	DDRD |= SIG_BUSY;
 31c:	54 9a       	sbi	0x0a, 4	; 10
	//UartRx();
	
rxFlag = 0;
 31e:	10 92 03 01 	sts	0x0103, r1
 
	byteArr[head++] = UDR0;
 322:	80 91 07 01 	lds	r24, 0x0107
 326:	90 91 08 01 	lds	r25, 0x0108
 32a:	20 91 c6 00 	lds	r18, 0x00C6
 32e:	fc 01       	movw	r30, r24
 330:	ef 5e       	subi	r30, 0xEF	; 239
 332:	fe 4f       	sbci	r31, 0xFE	; 254
 334:	20 83       	st	Z, r18
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	90 93 08 01 	sts	0x0108, r25
 33c:	80 93 07 01 	sts	0x0107, r24
	
	if(head == 2) head = 0;
 340:	80 91 07 01 	lds	r24, 0x0107
 344:	90 91 08 01 	lds	r25, 0x0108
 348:	02 97       	sbiw	r24, 0x02	; 2
 34a:	21 f4       	brne	.+8      	; 0x354 <__vector_20+0x50>
 34c:	10 92 08 01 	sts	0x0108, r1
 350:	10 92 07 01 	sts	0x0107, r1
	//byteCntr++; 
	//currently only use of one expander which is trigegred by an 'a', 
	// so the following is ok
	if(byteCntr >= 8)byteCntr = 0;
 354:	80 91 02 01 	lds	r24, 0x0102
 358:	88 30       	cpi	r24, 0x08	; 8
 35a:	10 f0       	brcs	.+4      	; 0x360 <__vector_20+0x5c>
 35c:	10 92 02 01 	sts	0x0102, r1

}
 360:	ff 91       	pop	r31
 362:	ef 91       	pop	r30
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	2f 91       	pop	r18
 36a:	0f 90       	pop	r0
 36c:	0b be       	out	0x3b, r0	; 59
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <__vector_22>:

SIGNAL (USART0_TX_vect)//TIMER1_COMPA_vect) 
{ 
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1
 382:	8f 93       	push	r24
if(freeState == 1)
 384:	80 91 0b 01 	lds	r24, 0x010B
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	31 f4       	brne	.+12     	; 0x398 <__vector_22+0x20>
{
EIFR = 0b00000010;
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	8c bb       	out	0x1c, r24	; 28
EIMSK = 0b00000010;
 390:	8d bb       	out	0x1d, r24	; 29
		freeState = 0;
 392:	10 92 0b 01 	sts	0x010B, r1
		DDRD &= ~(SIG_BUSY); 
 396:	54 98       	cbi	0x0a, 4	; 10
		}
}
 398:	8f 91       	pop	r24
 39a:	0f 90       	pop	r0
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	0f 90       	pop	r0
 3a0:	1f 90       	pop	r1
 3a2:	18 95       	reti

000003a4 <_exit>:
 3a4:	f8 94       	cli

000003a6 <__stop_program>:
 3a6:	ff cf       	rjmp	.-2      	; 0x3a6 <__stop_program>

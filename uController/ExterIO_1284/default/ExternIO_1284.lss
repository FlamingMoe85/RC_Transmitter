
ExternIO_1284.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000072c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000072c  000007c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  00800068  00800068  000007c8  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000201  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004de  00000000  00000000  000009e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001aa  00000000  00000000  00000ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006eb  00000000  00000000  00001071  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  0000175c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000237  00000000  00000000  0000183c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001a73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	03 c2       	rjmp	.+1030   	; 0x40a <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	09 c2       	rjmp	.+1042   	; 0x42a <__vector_11>
  18:	cb c2       	rjmp	.+1430   	; 0x5b0 <__vector_12>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e2       	ldi	r30, 0x2C	; 44
  3a:	f7 e0       	ldi	r31, 0x07	; 7
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a8 36       	cpi	r26, 0x68	; 104
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a8 e6       	ldi	r26, 0x68	; 104
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a1 3a       	cpi	r26, 0xA1	; 161
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	13 d1       	rcall	.+550    	; 0x280 <main>
  5a:	66 c3       	rjmp	.+1740   	; 0x728 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <IsCtsFtee>:
	CTS:  PD3 // Clear to send 	-> input
*/

char IsCtsFtee()
{ 
	if((PIND & CTS) == CTS) 
  5e:	80 b3       	in	r24, 0x10	; 16
  60:	86 95       	lsr	r24
  62:	86 95       	lsr	r24
  64:	86 95       	lsr	r24
  66:	80 95       	com	r24
	}
	else 
	{
		return CTS_BUSY;
	}
}
  68:	81 70       	andi	r24, 0x01	; 1
  6a:	08 95       	ret

0000006c <DiffHeadTail>:

unsigned int DiffHeadTail(unsigned int headC, unsigned int tailC)
{
	if(headC > tailC) return (headC - tailC);
  6c:	68 17       	cp	r22, r24
  6e:	79 07       	cpc	r23, r25
  70:	28 f4       	brcc	.+10     	; 0x7c <DiffHeadTail+0x10>
  72:	9c 01       	movw	r18, r24
  74:	26 1b       	sub	r18, r22
  76:	37 0b       	sbc	r19, r23
  78:	b9 01       	movw	r22, r18
  7a:	08 c0       	rjmp	.+16     	; 0x8c <DiffHeadTail+0x20>
	else if(headC < tailC)return (tailC - headC);
  7c:	86 17       	cp	r24, r22
  7e:	97 07       	cpc	r25, r23
  80:	18 f0       	brcs	.+6      	; 0x88 <DiffHeadTail+0x1c>
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	70 e0       	ldi	r23, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <DiffHeadTail+0x20>
  88:	68 1b       	sub	r22, r24
  8a:	79 0b       	sbc	r23, r25
	else return 0;
}
  8c:	cb 01       	movw	r24, r22
  8e:	08 95       	ret

00000090 <GetSwitchPins>:
return (((unsigned char)(PINB ^ 0b11111111))<<8) +  ((unsigned char)(PINC ^ 0b11111111));
#endif

#ifdef __AVR_ATmega8__
unsigned int tmpC = 0;
tmpC |= (((PINB ^ 0b11111111) & 0b00111100)<<0);
  90:	86 b3       	in	r24, 0x16	; 22
tmpC |= (((PIND ^ 0b11111111) & 0b01100000)>>5);
  92:	20 b3       	in	r18, 0x10	; 16
  94:	20 95       	com	r18
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	20 76       	andi	r18, 0x60	; 96
  9a:	30 70       	andi	r19, 0x00	; 0
  9c:	95 e0       	ldi	r25, 0x05	; 5
  9e:	35 95       	asr	r19
  a0:	27 95       	ror	r18
  a2:	9a 95       	dec	r25
  a4:	e1 f7       	brne	.-8      	; 0x9e <GetSwitchPins+0xe>
  a6:	80 95       	com	r24
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	8c 73       	andi	r24, 0x3C	; 60
  ac:	90 70       	andi	r25, 0x00	; 0
  ae:	28 2b       	or	r18, r24
  b0:	39 2b       	or	r19, r25
return tmpC;
#endif
}
  b2:	c9 01       	movw	r24, r18
  b4:	08 95       	ret

000000b6 <Enable_UDREIE>:
#ifdef __AVR_ATmega1284P__
UCSRB_COM |= (1<<UDRIE0);
#endif

#ifdef __AVR_ATmega8__
UCSRB_COM |= (1<<UDRIE);
  b6:	55 9a       	sbi	0x0a, 5	; 10
#endif
}
  b8:	08 95       	ret

000000ba <Disable_UDREIE>:
#ifdef __AVR_ATmega1284P__
UCSRB_COM &= ~(1<<UDRIE0);
#endif

#ifdef __AVR_ATmega8__
UCSRB_COM &= ~(1<<UDRIE);
  ba:	55 98       	cbi	0x0a, 5	; 10
#endif
}
  bc:	08 95       	ret

000000be <Enable_ExtInt>:
EIFR |= 0b00000001;
EIMSK |= 0b00000001;
#endif

#ifdef __AVR_ATmega8__
GIFR |= (1<<INTF0);// clear flag
  be:	8a b7       	in	r24, 0x3a	; 58
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	8a bf       	out	0x3a, r24	; 58
GICR |= (1<<INT0);// Int enable
  c4:	8b b7       	in	r24, 0x3b	; 59
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	8b bf       	out	0x3b, r24	; 59
#endif
}
  ca:	08 95       	ret

000000cc <Disable_ExtInt>:
#ifdef __AVR_ATmega1284P__
EIMSK &= ~(1<<INT0);
#endif

#ifdef __AVR_ATmega8__
GICR &= ~(1<<INT0);// Int enable
  cc:	8b b7       	in	r24, 0x3b	; 59
  ce:	8f 7b       	andi	r24, 0xBF	; 191
  d0:	8b bf       	out	0x3b, r24	; 59
#endif
}
  d2:	08 95       	ret

000000d4 <GetAdcs>:

void GetAdcs()
{
#ifdef __AVR_ATmega8__
ADMUX = 0b01000101;
  d4:	85 e4       	ldi	r24, 0x45	; 69
  d6:	87 b9       	out	0x07, r24	; 7
ADCSRA = 0b11000111;
  d8:	87 ec       	ldi	r24, 0xC7	; 199
  da:	86 b9       	out	0x06, r24	; 6
while ((ADCSRA & 64) == 64);
  dc:	36 99       	sbic	0x06, 6	; 6
  de:	fe cf       	rjmp	.-4      	; 0xdc <GetAdcs+0x8>
adcVal = ADC;
  e0:	24 b1       	in	r18, 0x04	; 4
  e2:	35 b1       	in	r19, 0x05	; 5
byteSendArr[0] = (adcVal & 0b0000001111100000)>>5;
  e4:	c9 01       	movw	r24, r18
  e6:	80 7e       	andi	r24, 0xE0	; 224
  e8:	93 70       	andi	r25, 0x03	; 3
  ea:	55 e0       	ldi	r21, 0x05	; 5
  ec:	96 95       	lsr	r25
  ee:	87 95       	ror	r24
  f0:	5a 95       	dec	r21
  f2:	e1 f7       	brne	.-8      	; 0xec <GetAdcs+0x18>
  f4:	80 93 95 00 	sts	0x0095, r24
byteSendArr[1] = (adcVal & 0b0000000000011111);
  f8:	2f 71       	andi	r18, 0x1F	; 31
  fa:	20 93 96 00 	sts	0x0096, r18

ADMUX = 0b01000100;
  fe:	84 e4       	ldi	r24, 0x44	; 68
 100:	87 b9       	out	0x07, r24	; 7
ADCSRA = 0b11000111;
 102:	87 ec       	ldi	r24, 0xC7	; 199
 104:	86 b9       	out	0x06, r24	; 6
while ((ADCSRA & 64) == 64);
 106:	36 99       	sbic	0x06, 6	; 6
 108:	fe cf       	rjmp	.-4      	; 0x106 <GetAdcs+0x32>
adcVal = ADC;
 10a:	24 b1       	in	r18, 0x04	; 4
 10c:	35 b1       	in	r19, 0x05	; 5
byteSendArr[2] = (adcVal & 0b0000001111100000)>>5;
 10e:	c9 01       	movw	r24, r18
 110:	80 7e       	andi	r24, 0xE0	; 224
 112:	93 70       	andi	r25, 0x03	; 3
 114:	45 e0       	ldi	r20, 0x05	; 5
 116:	96 95       	lsr	r25
 118:	87 95       	ror	r24
 11a:	4a 95       	dec	r20
 11c:	e1 f7       	brne	.-8      	; 0x116 <GetAdcs+0x42>
 11e:	80 93 97 00 	sts	0x0097, r24
byteSendArr[3] = (adcVal & 0b0000000000011111);
 122:	2f 71       	andi	r18, 0x1F	; 31
 124:	20 93 98 00 	sts	0x0098, r18

ADMUX = 0b01000011;
 128:	83 e4       	ldi	r24, 0x43	; 67
 12a:	87 b9       	out	0x07, r24	; 7
ADCSRA = 0b11000111;
 12c:	87 ec       	ldi	r24, 0xC7	; 199
 12e:	86 b9       	out	0x06, r24	; 6
while ((ADCSRA & 64) == 64);
 130:	36 99       	sbic	0x06, 6	; 6
 132:	fe cf       	rjmp	.-4      	; 0x130 <GetAdcs+0x5c>
adcVal = ADC;
 134:	24 b1       	in	r18, 0x04	; 4
 136:	35 b1       	in	r19, 0x05	; 5
 138:	30 93 9e 00 	sts	0x009E, r19
 13c:	20 93 9d 00 	sts	0x009D, r18
byteSendArr[4] = (adcVal & 0b0000001111100000)>>5;
 140:	c9 01       	movw	r24, r18
 142:	80 7e       	andi	r24, 0xE0	; 224
 144:	93 70       	andi	r25, 0x03	; 3
 146:	35 e0       	ldi	r19, 0x05	; 5
 148:	96 95       	lsr	r25
 14a:	87 95       	ror	r24
 14c:	3a 95       	dec	r19
 14e:	e1 f7       	brne	.-8      	; 0x148 <GetAdcs+0x74>
 150:	80 93 99 00 	sts	0x0099, r24
byteSendArr[5] = (adcVal & 0b0000000000011111);
 154:	2f 71       	andi	r18, 0x1F	; 31
 156:	20 93 9a 00 	sts	0x009A, r18
while ((ADCSRA & 64) == 64);
adcVal = ADC;
byteSendArr[4] = (adcVal & 0b0000001111100000)>>5;
byteSendArr[5] = (adcVal & 0b0000000000011111);
#endif
}
 15a:	08 95       	ret

0000015c <AddToAmtReq>:
{
	static unsigned int tmp16_1, tmp16_2;

	static unsigned int tmpTail;

	if(head < 4)
 15c:	80 91 6c 00 	lds	r24, 0x006C
 160:	90 91 6d 00 	lds	r25, 0x006D
 164:	04 97       	sbiw	r24, 0x04	; 4
 166:	48 f4       	brcc	.+18     	; 0x17a <AddToAmtReq+0x1e>
	{
		tmpTail = BUF_LEN - head;
 168:	20 91 6c 00 	lds	r18, 0x006C
 16c:	30 91 6d 00 	lds	r19, 0x006D
 170:	84 e1       	ldi	r24, 0x14	; 20
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	82 1b       	sub	r24, r18
 176:	93 0b       	sbc	r25, r19
 178:	05 c0       	rjmp	.+10     	; 0x184 <AddToAmtReq+0x28>
	}
	else
	{
		tmpTail = head - 4;
 17a:	80 91 6c 00 	lds	r24, 0x006C
 17e:	90 91 6d 00 	lds	r25, 0x006D
 182:	04 97       	sbiw	r24, 0x04	; 4
 184:	90 93 7b 00 	sts	0x007B, r25
 188:	80 93 7a 00 	sts	0x007A, r24
	}

	if(modeCntr == 0)
 18c:	80 91 77 00 	lds	r24, 0x0077
 190:	90 91 78 00 	lds	r25, 0x0078
 194:	89 2b       	or	r24, r25
 196:	49 f4       	brne	.+18     	; 0x1aa <AddToAmtReq+0x4e>
	{
		byteSendArr[0] = 0;
 198:	10 92 95 00 	sts	0x0095, r1
		byteSendArr[1] = 0;
 19c:	10 92 96 00 	sts	0x0096, r1
		byteSendArr[2] = 0;
 1a0:	10 92 97 00 	sts	0x0097, r1
		byteSendArr[3] = 0;	
 1a4:	10 92 98 00 	sts	0x0098, r1
 1a8:	24 c0       	rjmp	.+72     	; 0x1f2 <AddToAmtReq+0x96>
		
	}
	else
	{
		byteSendArr[0] = byteArr[tmpTail++];
 1aa:	80 91 7a 00 	lds	r24, 0x007A
 1ae:	90 91 7b 00 	lds	r25, 0x007B
 1b2:	fc 01       	movw	r30, r24
 1b4:	ef 57       	subi	r30, 0x7F	; 127
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	20 81       	ld	r18, Z
 1ba:	20 93 95 00 	sts	0x0095, r18
 1be:	01 96       	adiw	r24, 0x01	; 1
		byteSendArr[1] = byteArr[tmpTail++];
 1c0:	fc 01       	movw	r30, r24
 1c2:	ef 57       	subi	r30, 0x7F	; 127
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	20 81       	ld	r18, Z
 1c8:	20 93 96 00 	sts	0x0096, r18
 1cc:	01 96       	adiw	r24, 0x01	; 1
		byteSendArr[2] = byteArr[tmpTail++];
 1ce:	fc 01       	movw	r30, r24
 1d0:	ef 57       	subi	r30, 0x7F	; 127
 1d2:	ff 4f       	sbci	r31, 0xFF	; 255
 1d4:	20 81       	ld	r18, Z
 1d6:	20 93 97 00 	sts	0x0097, r18
 1da:	01 96       	adiw	r24, 0x01	; 1
		byteSendArr[3] = byteArr[tmpTail++];
 1dc:	fc 01       	movw	r30, r24
 1de:	ef 57       	subi	r30, 0x7F	; 127
 1e0:	ff 4f       	sbci	r31, 0xFF	; 255
 1e2:	20 81       	ld	r18, Z
 1e4:	20 93 98 00 	sts	0x0098, r18
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	90 93 7b 00 	sts	0x007B, r25
 1ee:	80 93 7a 00 	sts	0x007A, r24
	}

	tmp16_1 = (byteSendArr[0] & 0b00011111);
 1f2:	80 91 95 00 	lds	r24, 0x0095
	tmp16_1 = (tmp16_1 << 5);
	tmp16_1 += (byteSendArr[1] & 0b00011111);
 1f6:	40 91 96 00 	lds	r20, 0x0096
	tmp16_1 += 8;
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	4f 71       	andi	r20, 0x1F	; 31
 1fe:	50 70       	andi	r21, 0x00	; 0
 200:	48 5f       	subi	r20, 0xF8	; 248
 202:	5f 4f       	sbci	r21, 0xFF	; 255
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	8f 71       	andi	r24, 0x1F	; 31
 208:	90 70       	andi	r25, 0x00	; 0
 20a:	f5 e0       	ldi	r31, 0x05	; 5
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	fa 95       	dec	r31
 212:	e1 f7       	brne	.-8      	; 0x20c <AddToAmtReq+0xb0>
 214:	48 0f       	add	r20, r24
 216:	59 1f       	adc	r21, r25
 218:	50 93 7f 00 	sts	0x007F, r21
 21c:	40 93 7e 00 	sts	0x007E, r20

	tmp16_2 = (byteSendArr[2] & 0b00011111);
 220:	80 91 97 00 	lds	r24, 0x0097
	tmp16_2 = (tmp16_2 << 5);
	tmp16_2 += (byteSendArr[3] & 0b00011111);
 224:	20 91 98 00 	lds	r18, 0x0098
	tmp16_2 += 3;
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	2f 71       	andi	r18, 0x1F	; 31
 22c:	30 70       	andi	r19, 0x00	; 0
 22e:	2d 5f       	subi	r18, 0xFD	; 253
 230:	3f 4f       	sbci	r19, 0xFF	; 255
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	8f 71       	andi	r24, 0x1F	; 31
 236:	90 70       	andi	r25, 0x00	; 0
 238:	e5 e0       	ldi	r30, 0x05	; 5
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	ea 95       	dec	r30
 240:	e1 f7       	brne	.-8      	; 0x23a <AddToAmtReq+0xde>
 242:	28 0f       	add	r18, r24
 244:	39 1f       	adc	r19, r25
 246:	30 93 7d 00 	sts	0x007D, r19
 24a:	20 93 7c 00 	sts	0x007C, r18

	byteSendArr[0] = (tmp16_1 >> 5) + MSG_AMT_REQ_BEG;
 24e:	ca 01       	movw	r24, r20
 250:	75 e0       	ldi	r23, 0x05	; 5
 252:	96 95       	lsr	r25
 254:	87 95       	ror	r24
 256:	7a 95       	dec	r23
 258:	e1 f7       	brne	.-8      	; 0x252 <AddToAmtReq+0xf6>
 25a:	80 5c       	subi	r24, 0xC0	; 192
 25c:	80 93 95 00 	sts	0x0095, r24
	byteSendArr[1] = tmp16_1 & 0b00011111;
 260:	4f 71       	andi	r20, 0x1F	; 31
 262:	40 93 96 00 	sts	0x0096, r20
	byteSendArr[2] = tmp16_2 >> 5;
 266:	c9 01       	movw	r24, r18
 268:	65 e0       	ldi	r22, 0x05	; 5
 26a:	96 95       	lsr	r25
 26c:	87 95       	ror	r24
 26e:	6a 95       	dec	r22
 270:	e1 f7       	brne	.-8      	; 0x26a <AddToAmtReq+0x10e>
 272:	80 93 97 00 	sts	0x0097, r24
	byteSendArr[3] = (tmp16_2 & 0b00011111) + MSG_AMT_REQ_END;
 276:	2f 71       	andi	r18, 0x1F	; 31
 278:	20 5a       	subi	r18, 0xA0	; 160
 27a:	20 93 98 00 	sts	0x0098, r18
/*	*/
}
 27e:	08 95       	ret

00000280 <main>:

int main(void)
{ 
 280:	cf 92       	push	r12
 282:	df 92       	push	r13
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
EIFR |= 0b00000001;
EIMSK |= 0b00000001;
#endif

#ifdef __AVR_ATmega8__
GIFR |= (1<<INTF0);// clear flag
 290:	8a b7       	in	r24, 0x3a	; 58
 292:	80 64       	ori	r24, 0x40	; 64
 294:	8a bf       	out	0x3a, r24	; 58
GICR |= (1<<INT0);// Int enable
 296:	8b b7       	in	r24, 0x3b	; 59
 298:	80 64       	ori	r24, 0x40	; 64
 29a:	8b bf       	out	0x3b, r24	; 59
{ 

Enable_ExtInt();

/* Set baud rate  for 9600 Baud*/
UBRRH_COM = (unsigned char)(0);
 29c:	10 bc       	out	0x20, r1	; 32
/* Enable receiver and transmitter */
UCSRB_COM = (1<<7)|(1<<4)|(1<<3);//
 29e:	88 e9       	ldi	r24, 0x98	; 152
 2a0:	8a b9       	out	0x0a, r24	; 10
/* Set frame format: 8data, 1stop bit */
#ifdef __AVR_ATmega8__
UBRRL_COM = (unsigned char)(102);
 2a2:	86 e6       	ldi	r24, 0x66	; 102
 2a4:	89 b9       	out	0x09, r24	; 9
UCSRC_COM = 128+6; 
 2a6:	86 e8       	ldi	r24, 0x86	; 134
 2a8:	80 bd       	out	0x20, r24	; 32
#ifdef __AVR_ATmega1284P__
UBRRL_COM = (unsigned char)(102);
UCSRC_COM = 6; 
#endif

PORTD |= CTS;
 2aa:	93 9a       	sbi	0x12, 3	; 18


#ifdef __AVR_ATmega8__
MCUCR = 1; // define Int Sense -> any edge
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	85 bf       	out	0x35, r24	; 53
DDRD = 0b00000010; 
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	81 bb       	out	0x11, r24	; 17
DDRB |= 2;
 2b4:	b9 9a       	sbi	0x17, 1	; 23
PORTB |= 0b00111110;
 2b6:	88 b3       	in	r24, 0x18	; 24
 2b8:	8e 63       	ori	r24, 0x3E	; 62
 2ba:	88 bb       	out	0x18, r24	; 24
PORTD |= 0b01100000;
 2bc:	82 b3       	in	r24, 0x12	; 18
 2be:	80 66       	ori	r24, 0x60	; 96
 2c0:	82 bb       	out	0x12, r24	; 18
PORTC = 0b11111111;
DIDR0 = 0b00000111;
PORTB = 0b00111111;
#endif

sei(); 
 2c2:	78 94       	sei
		{
			byteSendArr[0] = 0;
		}
		byteSendArr[0] |= ((switchBits & 31744) >> 10);
		byteSendArr[1] = ((switchBits & 992) >> 5);
		byteSendArr[2] = DIG_END;
 2c4:	20 ea       	ldi	r18, 0xA0	; 160
 2c6:	c2 2e       	mov	r12, r18
		extMode = EXT_DIG_REQ;
		byteCntr = 0;
		switchBits = GetSwitchPins();
		if(TOKEN_FLAG == 0)
		{
			byteSendArr[0] = DIG_BEGIN;
 2c8:	90 e8       	ldi	r25, 0x80	; 128
 2ca:	d9 2e       	mov	r13, r25
		byteSendArr[1] = (MSG_AMT_REQ_END + 3);
		Enable_UDREIE();
	}
	else if(extMode == EXT_ADC_FILL)
	{
		extMode = EXT_ADC_REQ;
 2cc:	01 e0       	ldi	r16, 0x01	; 1
 2ce:	10 e0       	ldi	r17, 0x00	; 0
		byteSendArr[2] |= (switchBits & 0b00011111);
		Enable_UDREIE();
	}
	else if(extMode == EXT_AMT_FILL)
	{
		extMode = EXT_INIT;
 2d0:	c2 e0       	ldi	r28, 0x02	; 2
 2d2:	d0 e0       	ldi	r29, 0x00	; 0
		else
		{
			byteSendArr[0] = 0;
		}
		byteSendArr[0] |= 8;
		byteSendArr[1] = (MSG_AMT_REQ_END + 3);
 2d4:	83 e6       	ldi	r24, 0x63	; 99
 2d6:	e8 2e       	mov	r14, r24
		extMode = EXT_INIT;
		byteCntr = 0;
		switchBits = GetSwitchPins();
		if(TOKEN_FLAG == 0)
		{
			byteSendArr[0] = MSG_AMT_REQ_BEG;
 2d8:	b0 e4       	ldi	r27, 0x40	; 64
 2da:	fb 2e       	mov	r15, r27
		tail++;
		if(tail == BUF_LEN)tail = 0;
	}
*/

	if(extMode == EXT_DIG_FILL)
 2dc:	80 91 62 00 	lds	r24, 0x0062
 2e0:	90 91 63 00 	lds	r25, 0x0063
 2e4:	05 97       	sbiw	r24, 0x05	; 5
 2e6:	b1 f5       	brne	.+108    	; 0x354 <main+0xd4>
	{
		extMode = EXT_DIG_REQ;
 2e8:	10 92 63 00 	sts	0x0063, r1
 2ec:	10 92 62 00 	sts	0x0062, r1
		byteCntr = 0;
 2f0:	10 92 61 00 	sts	0x0061, r1
 2f4:	10 92 60 00 	sts	0x0060, r1
		switchBits = GetSwitchPins();
 2f8:	cb de       	rcall	.-618    	; 0x90 <GetSwitchPins>
 2fa:	ac 01       	movw	r20, r24
 2fc:	90 93 a0 00 	sts	0x00A0, r25
 300:	80 93 9f 00 	sts	0x009F, r24
		if(TOKEN_FLAG == 0)
 304:	80 91 79 00 	lds	r24, 0x0079
 308:	88 23       	and	r24, r24
 30a:	19 f4       	brne	.+6      	; 0x312 <main+0x92>
		{
			byteSendArr[0] = DIG_BEGIN;
 30c:	d0 92 95 00 	sts	0x0095, r13
 310:	02 c0       	rjmp	.+4      	; 0x316 <main+0x96>
		}
		else
		{
			byteSendArr[0] = 0;
 312:	10 92 95 00 	sts	0x0095, r1
		}
		byteSendArr[0] |= ((switchBits & 31744) >> 10);
 316:	20 91 95 00 	lds	r18, 0x0095
 31a:	ca 01       	movw	r24, r20
 31c:	80 70       	andi	r24, 0x00	; 0
 31e:	9c 77       	andi	r25, 0x7C	; 124
 320:	89 2f       	mov	r24, r25
 322:	86 95       	lsr	r24
 324:	86 95       	lsr	r24
 326:	28 2b       	or	r18, r24
 328:	20 93 95 00 	sts	0x0095, r18
		byteSendArr[1] = ((switchBits & 992) >> 5);
 32c:	ca 01       	movw	r24, r20
 32e:	80 7e       	andi	r24, 0xE0	; 224
 330:	93 70       	andi	r25, 0x03	; 3
 332:	a5 e0       	ldi	r26, 0x05	; 5
 334:	96 95       	lsr	r25
 336:	87 95       	ror	r24
 338:	aa 95       	dec	r26
 33a:	e1 f7       	brne	.-8      	; 0x334 <main+0xb4>
 33c:	80 93 96 00 	sts	0x0096, r24
		byteSendArr[2] = DIG_END;
 340:	c0 92 97 00 	sts	0x0097, r12
		byteSendArr[2] |= (switchBits & 0b00011111);
 344:	90 91 97 00 	lds	r25, 0x0097
 348:	84 2f       	mov	r24, r20
 34a:	8f 71       	andi	r24, 0x1F	; 31
 34c:	89 2b       	or	r24, r25
 34e:	80 93 97 00 	sts	0x0097, r24
 352:	41 c0       	rjmp	.+130    	; 0x3d6 <main+0x156>
		Enable_UDREIE();
	}
	else if(extMode == EXT_AMT_FILL)
 354:	80 91 62 00 	lds	r24, 0x0062
 358:	90 91 63 00 	lds	r25, 0x0063
 35c:	06 97       	sbiw	r24, 0x06	; 6
 35e:	f1 f4       	brne	.+60     	; 0x39c <main+0x11c>
	{
		extMode = EXT_INIT;
 360:	d0 93 63 00 	sts	0x0063, r29
 364:	c0 93 62 00 	sts	0x0062, r28
		byteCntr = 0;
 368:	10 92 61 00 	sts	0x0061, r1
 36c:	10 92 60 00 	sts	0x0060, r1
		switchBits = GetSwitchPins();
 370:	8f de       	rcall	.-738    	; 0x90 <GetSwitchPins>
 372:	90 93 a0 00 	sts	0x00A0, r25
 376:	80 93 9f 00 	sts	0x009F, r24
		if(TOKEN_FLAG == 0)
 37a:	80 91 79 00 	lds	r24, 0x0079
 37e:	88 23       	and	r24, r24
 380:	19 f4       	brne	.+6      	; 0x388 <main+0x108>
		{
			byteSendArr[0] = MSG_AMT_REQ_BEG;
 382:	f0 92 95 00 	sts	0x0095, r15
 386:	02 c0       	rjmp	.+4      	; 0x38c <main+0x10c>
		}
		else
		{
			byteSendArr[0] = 0;
 388:	10 92 95 00 	sts	0x0095, r1
		}
		byteSendArr[0] |= 8;
 38c:	80 91 95 00 	lds	r24, 0x0095
 390:	88 60       	ori	r24, 0x08	; 8
 392:	80 93 95 00 	sts	0x0095, r24
		byteSendArr[1] = (MSG_AMT_REQ_END + 3);
 396:	e0 92 96 00 	sts	0x0096, r14
 39a:	1d c0       	rjmp	.+58     	; 0x3d6 <main+0x156>
		Enable_UDREIE();
	}
	else if(extMode == EXT_ADC_FILL)
 39c:	80 91 62 00 	lds	r24, 0x0062
 3a0:	90 91 63 00 	lds	r25, 0x0063
 3a4:	09 97       	sbiw	r24, 0x09	; 9
 3a6:	c1 f4       	brne	.+48     	; 0x3d8 <main+0x158>
	{
		extMode = EXT_ADC_REQ;
 3a8:	10 93 63 00 	sts	0x0063, r17
 3ac:	00 93 62 00 	sts	0x0062, r16
		byteCntr = 0;
 3b0:	10 92 61 00 	sts	0x0061, r1
 3b4:	10 92 60 00 	sts	0x0060, r1
		GetAdcs();
 3b8:	8d de       	rcall	.-742    	; 0xd4 <GetAdcs>
		if(TOKEN_FLAG == 0)
 3ba:	80 91 79 00 	lds	r24, 0x0079
 3be:	88 23       	and	r24, r24
 3c0:	29 f4       	brne	.+10     	; 0x3cc <main+0x14c>
		{
			byteSendArr[0] |= ADC_BEGIN;
 3c2:	80 91 95 00 	lds	r24, 0x0095
 3c6:	80 6c       	ori	r24, 0xC0	; 192
 3c8:	80 93 95 00 	sts	0x0095, r24
		}
		else
		{
			//byteSendArr[0] = 0;
		}
		byteSendArr[5] |= ADC_END;
 3cc:	80 91 9a 00 	lds	r24, 0x009A
 3d0:	80 6e       	ori	r24, 0xE0	; 224
 3d2:	80 93 9a 00 	sts	0x009A, r24
#ifdef __AVR_ATmega1284P__
UCSRB_COM |= (1<<UDRIE0);
#endif

#ifdef __AVR_ATmega8__
UCSRB_COM |= (1<<UDRIE);
 3d6:	55 9a       	sbi	0x0a, 5	; 10
#define EXT_ADC_REQ		1
uint16_t amtOfExtAdc = 0, amtOfExtDigs = 0, extMode = EXT_INIT;
	*/
	
	#ifdef __AVR_ATmega8__
	ledCntr++;
 3d8:	80 91 71 00 	lds	r24, 0x0071
 3dc:	90 91 72 00 	lds	r25, 0x0072
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	90 93 72 00 	sts	0x0072, r25
 3e6:	80 93 71 00 	sts	0x0071, r24
	if(ledCntr == 3000)PORTB &= ~2;
 3ea:	2b e0       	ldi	r18, 0x0B	; 11
 3ec:	88 3b       	cpi	r24, 0xB8	; 184
 3ee:	92 07       	cpc	r25, r18
 3f0:	11 f4       	brne	.+4      	; 0x3f6 <main+0x176>
 3f2:	c1 98       	cbi	0x18, 1	; 24
 3f4:	73 cf       	rjmp	.-282    	; 0x2dc <main+0x5c>
	else if(ledCntr == 6000)
 3f6:	80 57       	subi	r24, 0x70	; 112
 3f8:	97 41       	sbci	r25, 0x17	; 23
 3fa:	09 f0       	breq	.+2      	; 0x3fe <main+0x17e>
 3fc:	6f cf       	rjmp	.-290    	; 0x2dc <main+0x5c>
	{
		PORTB |= 2;
 3fe:	c1 9a       	sbi	0x18, 1	; 24
		ledCntr = 0;
 400:	10 92 72 00 	sts	0x0072, r1
 404:	10 92 71 00 	sts	0x0071, r1
 408:	69 cf       	rjmp	.-302    	; 0x2dc <main+0x5c>

0000040a <__vector_1>:
}
}//main

/**/
SIGNAL (INT0_vect)
{
 40a:	1f 92       	push	r1
 40c:	0f 92       	push	r0
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	0f 92       	push	r0
 412:	11 24       	eor	r1, r1
 414:	8f 93       	push	r24
	DDRD |= RTS;
 416:	8c 9a       	sbi	0x11, 4	; 17
#ifdef __AVR_ATmega1284P__
EIMSK &= ~(1<<INT0);
#endif

#ifdef __AVR_ATmega8__
GICR &= ~(1<<INT0);// Int enable
 418:	8b b7       	in	r24, 0x3b	; 59
 41a:	8f 7b       	andi	r24, 0xBF	; 191
 41c:	8b bf       	out	0x3b, r24	; 59
/**/
SIGNAL (INT0_vect)
{
	DDRD |= RTS;
	Disable_ExtInt();
}
 41e:	8f 91       	pop	r24
 420:	0f 90       	pop	r0
 422:	0f be       	out	0x3f, r0	; 63
 424:	0f 90       	pop	r0
 426:	1f 90       	pop	r1
 428:	18 95       	reti

0000042a <__vector_11>:


SIGNAL (USART_RX_vect_COM)//TIMER1_COMPA_vect) 
{ 
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	2f 93       	push	r18
 436:	3f 93       	push	r19
 438:	4f 93       	push	r20
 43a:	5f 93       	push	r21
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
 440:	ef 93       	push	r30
 442:	ff 93       	push	r31
char rxChar;
char newMode;
unsigned int headTmp;	

	rxChar = UDR_COM;
 444:	4c b1       	in	r20, 0x0c	; 12
	newMode = rxChar & 0b11000000;
 446:	84 2f       	mov	r24, r20
 448:	80 7c       	andi	r24, 0xC0	; 192
	if(newMode != 0)
 44a:	d9 f0       	breq	.+54     	; 0x482 <__stack+0x23>
	{
		if(newMode != extModeOld)
 44c:	28 2f       	mov	r18, r24
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	80 91 64 00 	lds	r24, 0x0064
 454:	90 91 65 00 	lds	r25, 0x0065
 458:	28 17       	cp	r18, r24
 45a:	39 07       	cpc	r19, r25
 45c:	29 f0       	breq	.+10     	; 0x468 <__stack+0x9>
		{
			modeCntr = 0;
 45e:	10 92 78 00 	sts	0x0078, r1
 462:	10 92 77 00 	sts	0x0077, r1
 466:	09 c0       	rjmp	.+18     	; 0x47a <__stack+0x1b>
		}
		else
		{
			modeCntr++;
 468:	80 91 77 00 	lds	r24, 0x0077
 46c:	90 91 78 00 	lds	r25, 0x0078
 470:	01 96       	adiw	r24, 0x01	; 1
 472:	90 93 78 00 	sts	0x0078, r25
 476:	80 93 77 00 	sts	0x0077, r24
		}
		extModeOld = newMode;
 47a:	30 93 65 00 	sts	0x0065, r19
 47e:	20 93 64 00 	sts	0x0064, r18
	}
	headTmp = head;
 482:	20 91 6c 00 	lds	r18, 0x006C
 486:	30 91 6d 00 	lds	r19, 0x006D
	byteArr[head++] = rxChar;
 48a:	80 91 6c 00 	lds	r24, 0x006C
 48e:	90 91 6d 00 	lds	r25, 0x006D
 492:	fc 01       	movw	r30, r24
 494:	ef 57       	subi	r30, 0x7F	; 127
 496:	ff 4f       	sbci	r31, 0xFF	; 255
 498:	40 83       	st	Z, r20
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	90 93 6d 00 	sts	0x006D, r25
 4a0:	80 93 6c 00 	sts	0x006C, r24
	if(head >= BUF_LEN)head = 0;
 4a4:	80 91 6c 00 	lds	r24, 0x006C
 4a8:	90 91 6d 00 	lds	r25, 0x006D
 4ac:	44 97       	sbiw	r24, 0x14	; 20
 4ae:	20 f0       	brcs	.+8      	; 0x4b8 <__stack+0x59>
 4b0:	10 92 6d 00 	sts	0x006D, r1
 4b4:	10 92 6c 00 	sts	0x006C, r1
	if((rxChar & 0b11100000) == DIG_BEGIN)
 4b8:	84 2f       	mov	r24, r20
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	80 7e       	andi	r24, 0xE0	; 224
 4be:	90 70       	andi	r25, 0x00	; 0
 4c0:	80 38       	cpi	r24, 0x80	; 128
 4c2:	91 05       	cpc	r25, r1
 4c4:	39 f4       	brne	.+14     	; 0x4d4 <__stack+0x75>
	{
		tail = headTmp;
 4c6:	30 93 6f 00 	sts	0x006F, r19
 4ca:	20 93 6e 00 	sts	0x006E, r18
		extMode = EXT_DIG_PASS;
 4ce:	84 e0       	ldi	r24, 0x04	; 4
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	2b c0       	rjmp	.+86     	; 0x52a <__stack+0xcb>
		Enable_UDREIE();
	}
	else if((rxChar & 0b11100000) == DIG_END)
 4d4:	80 3a       	cpi	r24, 0xA0	; 160
 4d6:	91 05       	cpc	r25, r1
 4d8:	49 f4       	brne	.+18     	; 0x4ec <__stack+0x8d>
	{
		if(extMode != EXT_DIG_PASS)
 4da:	80 91 62 00 	lds	r24, 0x0062
 4de:	90 91 63 00 	lds	r25, 0x0063
 4e2:	04 97       	sbiw	r24, 0x04	; 4
 4e4:	c9 f1       	breq	.+114    	; 0x558 <__stack+0xf9>
		{
			extMode = EXT_DIG_FILL;
 4e6:	85 e0       	ldi	r24, 0x05	; 5
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	2f c0       	rjmp	.+94     	; 0x54a <__stack+0xeb>
		else 
		{
			Enable_UDREIE();
		}
	}
	else if((rxChar & 0b11100000) == MSG_AMT_REQ_BEG)
 4ec:	80 34       	cpi	r24, 0x40	; 64
 4ee:	91 05       	cpc	r25, r1
 4f0:	39 f4       	brne	.+14     	; 0x500 <__stack+0xa1>
	{
		tail = headTmp;
 4f2:	30 93 6f 00 	sts	0x006F, r19
 4f6:	20 93 6e 00 	sts	0x006E, r18
		extMode = EXT_AMT_PASS;
 4fa:	87 e0       	ldi	r24, 0x07	; 7
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	15 c0       	rjmp	.+42     	; 0x52a <__stack+0xcb>
		Enable_UDREIE();
	}
	else if((rxChar & 0b11100000) == MSG_AMT_REQ_END)
 500:	80 36       	cpi	r24, 0x60	; 96
 502:	91 05       	cpc	r25, r1
 504:	49 f4       	brne	.+18     	; 0x518 <__stack+0xb9>
	{
		if(extMode != EXT_AMT_PASS)
 506:	80 91 62 00 	lds	r24, 0x0062
 50a:	90 91 63 00 	lds	r25, 0x0063
 50e:	07 97       	sbiw	r24, 0x07	; 7
 510:	19 f1       	breq	.+70     	; 0x558 <__stack+0xf9>
		{
			extMode = EXT_AMT_FILL;
 512:	86 e0       	ldi	r24, 0x06	; 6
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	19 c0       	rjmp	.+50     	; 0x54a <__stack+0xeb>
		else 
		{
			Enable_UDREIE();
		}
	}
	else if((rxChar & 0b11100000) == ADC_BEGIN)
 518:	80 3c       	cpi	r24, 0xC0	; 192
 51a:	91 05       	cpc	r25, r1
 51c:	59 f4       	brne	.+22     	; 0x534 <__stack+0xd5>
	{
		tail = headTmp;
 51e:	30 93 6f 00 	sts	0x006F, r19
 522:	20 93 6e 00 	sts	0x006E, r18
		extMode = EXT_ADC_PASS;
 526:	88 e0       	ldi	r24, 0x08	; 8
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	90 93 63 00 	sts	0x0063, r25
 52e:	80 93 62 00 	sts	0x0062, r24
 532:	12 c0       	rjmp	.+36     	; 0x558 <__stack+0xf9>
		Enable_UDREIE();
	}
	else if((rxChar & 0b11100000) == ADC_END)
 534:	80 3e       	cpi	r24, 0xE0	; 224
 536:	91 05       	cpc	r25, r1
 538:	81 f4       	brne	.+32     	; 0x55a <__stack+0xfb>
	{
		if(extMode != EXT_ADC_PASS)
 53a:	80 91 62 00 	lds	r24, 0x0062
 53e:	90 91 63 00 	lds	r25, 0x0063
 542:	08 97       	sbiw	r24, 0x08	; 8
 544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
		{
			extMode = EXT_ADC_FILL;
 546:	89 e0       	ldi	r24, 0x09	; 9
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	90 93 63 00 	sts	0x0063, r25
 54e:	80 93 62 00 	sts	0x0062, r24
			TOKEN_FLAG = 0;
 552:	10 92 79 00 	sts	0x0079, r1
 556:	01 c0       	rjmp	.+2      	; 0x55a <__stack+0xfb>
#ifdef __AVR_ATmega1284P__
UCSRB_COM |= (1<<UDRIE0);
#endif

#ifdef __AVR_ATmega8__
UCSRB_COM |= (1<<UDRIE);
 558:	55 9a       	sbi	0x0a, 5	; 10
		rxChar = UDR_COM;
		byteArr[head++] = rxChar;
		if(head >= BUF_LEN) head = 0;
	}
	*/
	if(DiffHeadTail(head, tail) < (10))
 55a:	20 91 6c 00 	lds	r18, 0x006C
 55e:	30 91 6d 00 	lds	r19, 0x006D
 562:	80 91 6e 00 	lds	r24, 0x006E
 566:	90 91 6f 00 	lds	r25, 0x006F
	}
}

unsigned int DiffHeadTail(unsigned int headC, unsigned int tailC)
{
	if(headC > tailC) return (headC - tailC);
 56a:	82 17       	cp	r24, r18
 56c:	93 07       	cpc	r25, r19
 56e:	28 f4       	brcc	.+10     	; 0x57a <__stack+0x11b>
 570:	a9 01       	movw	r20, r18
 572:	48 1b       	sub	r20, r24
 574:	59 0b       	sbc	r21, r25
 576:	ca 01       	movw	r24, r20
 578:	05 c0       	rjmp	.+10     	; 0x584 <__stack+0x125>
	else if(headC < tailC)return (tailC - headC);
 57a:	28 17       	cp	r18, r24
 57c:	39 07       	cpc	r19, r25
 57e:	20 f4       	brcc	.+8      	; 0x588 <__stack+0x129>
 580:	82 1b       	sub	r24, r18
 582:	93 0b       	sbc	r25, r19
		rxChar = UDR_COM;
		byteArr[head++] = rxChar;
		if(head >= BUF_LEN) head = 0;
	}
	*/
	if(DiffHeadTail(head, tail) < (10))
 584:	0a 97       	sbiw	r24, 0x0a	; 10
 586:	38 f4       	brcc	.+14     	; 0x596 <__stack+0x137>
	{
		DDRD &= ~RTS;
 588:	8c 98       	cbi	0x11, 4	; 17
EIFR |= 0b00000001;
EIMSK |= 0b00000001;
#endif

#ifdef __AVR_ATmega8__
GIFR |= (1<<INTF0);// clear flag
 58a:	8a b7       	in	r24, 0x3a	; 58
 58c:	80 64       	ori	r24, 0x40	; 64
 58e:	8a bf       	out	0x3a, r24	; 58
GICR |= (1<<INT0);// Int enable
 590:	8b b7       	in	r24, 0x3b	; 59
 592:	80 64       	ori	r24, 0x40	; 64
 594:	8b bf       	out	0x3b, r24	; 59
	{
		DDRD &= ~RTS;
		Enable_ExtInt();
	}

}
 596:	ff 91       	pop	r31
 598:	ef 91       	pop	r30
 59a:	9f 91       	pop	r25
 59c:	8f 91       	pop	r24
 59e:	5f 91       	pop	r21
 5a0:	4f 91       	pop	r20
 5a2:	3f 91       	pop	r19
 5a4:	2f 91       	pop	r18
 5a6:	0f 90       	pop	r0
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	0f 90       	pop	r0
 5ac:	1f 90       	pop	r1
 5ae:	18 95       	reti

000005b0 <__vector_12>:


SIGNAL (USART_UDRE_vect_COM)
{ 
 5b0:	1f 92       	push	r1
 5b2:	0f 92       	push	r0
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	0f 92       	push	r0
 5b8:	11 24       	eor	r1, r1
 5ba:	2f 93       	push	r18
 5bc:	3f 93       	push	r19
 5be:	8f 93       	push	r24
 5c0:	9f 93       	push	r25
 5c2:	ef 93       	push	r30
 5c4:	ff 93       	push	r31
	CTS:  PD3 // Clear to send 	-> input
*/

char IsCtsFtee()
{ 
	if((PIND & CTS) == CTS) 
 5c6:	83 9b       	sbis	0x10, 3	; 16
 5c8:	a4 c0       	rjmp	.+328    	; 0x712 <__vector_12+0x162>
{ 
char tmpTxChar;

	if(IsCtsFtee() == CTS_FREE)
	{
		if(extMode == EXT_DIG_PASS)
 5ca:	80 91 62 00 	lds	r24, 0x0062
 5ce:	90 91 63 00 	lds	r25, 0x0063
 5d2:	04 97       	sbiw	r24, 0x04	; 4
 5d4:	91 f4       	brne	.+36     	; 0x5fa <__vector_12+0x4a>
		{
			tmpTxChar = byteArr[tail++];
 5d6:	80 91 6e 00 	lds	r24, 0x006E
 5da:	90 91 6f 00 	lds	r25, 0x006F
 5de:	fc 01       	movw	r30, r24
 5e0:	ef 57       	subi	r30, 0x7F	; 127
 5e2:	ff 4f       	sbci	r31, 0xFF	; 255
 5e4:	e0 81       	ld	r30, Z
 5e6:	01 96       	adiw	r24, 0x01	; 1
 5e8:	90 93 6f 00 	sts	0x006F, r25
 5ec:	80 93 6e 00 	sts	0x006E, r24
			if(tmpTxChar & 0b00100000)
 5f0:	e5 ff       	sbrs	r30, 5
 5f2:	3b c0       	rjmp	.+118    	; 0x66a <__vector_12+0xba>
			{
				extMode = EXT_DIG_FILL;
 5f4:	85 e0       	ldi	r24, 0x05	; 5
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	2f c0       	rjmp	.+94     	; 0x658 <__vector_12+0xa8>
			if(head == tail)
			{
				Disable_UDREIE();
			}
		}
		else if(extMode == EXT_AMT_PASS)
 5fa:	80 91 62 00 	lds	r24, 0x0062
 5fe:	90 91 63 00 	lds	r25, 0x0063
 602:	07 97       	sbiw	r24, 0x07	; 7
 604:	91 f4       	brne	.+36     	; 0x62a <__vector_12+0x7a>
		{
			tmpTxChar = byteArr[tail++];
 606:	80 91 6e 00 	lds	r24, 0x006E
 60a:	90 91 6f 00 	lds	r25, 0x006F
 60e:	fc 01       	movw	r30, r24
 610:	ef 57       	subi	r30, 0x7F	; 127
 612:	ff 4f       	sbci	r31, 0xFF	; 255
 614:	e0 81       	ld	r30, Z
 616:	01 96       	adiw	r24, 0x01	; 1
 618:	90 93 6f 00 	sts	0x006F, r25
 61c:	80 93 6e 00 	sts	0x006E, r24
			if(tmpTxChar & 0b00100000)
 620:	e5 ff       	sbrs	r30, 5
 622:	23 c0       	rjmp	.+70     	; 0x66a <__vector_12+0xba>
			{
				extMode = EXT_AMT_FILL;
 624:	86 e0       	ldi	r24, 0x06	; 6
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	17 c0       	rjmp	.+46     	; 0x658 <__vector_12+0xa8>
			if(head == tail)
			{
				Disable_UDREIE();
			}
		}
		else if(extMode == EXT_ADC_PASS)
 62a:	80 91 62 00 	lds	r24, 0x0062
 62e:	90 91 63 00 	lds	r25, 0x0063
 632:	08 97       	sbiw	r24, 0x08	; 8
 634:	91 f5       	brne	.+100    	; 0x69a <__vector_12+0xea>
		{
			tmpTxChar = byteArr[tail++];
 636:	80 91 6e 00 	lds	r24, 0x006E
 63a:	90 91 6f 00 	lds	r25, 0x006F
 63e:	fc 01       	movw	r30, r24
 640:	ef 57       	subi	r30, 0x7F	; 127
 642:	ff 4f       	sbci	r31, 0xFF	; 255
 644:	e0 81       	ld	r30, Z
 646:	01 96       	adiw	r24, 0x01	; 1
 648:	90 93 6f 00 	sts	0x006F, r25
 64c:	80 93 6e 00 	sts	0x006E, r24
			if(tmpTxChar & 0b00100000)
 650:	e5 ff       	sbrs	r30, 5
 652:	0b c0       	rjmp	.+22     	; 0x66a <__vector_12+0xba>
			{
				extMode = EXT_ADC_FILL;
 654:	89 e0       	ldi	r24, 0x09	; 9
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	90 93 63 00 	sts	0x0063, r25
 65c:	80 93 62 00 	sts	0x0062, r24
				TOKEN_FLAG = 1;
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	80 93 79 00 	sts	0x0079, r24
				tmpTxChar &= 0b00011111;
 666:	ef 71       	andi	r30, 0x1F	; 31
#ifdef __AVR_ATmega1284P__
UCSRB_COM &= ~(1<<UDRIE0);
#endif

#ifdef __AVR_ATmega8__
UCSRB_COM &= ~(1<<UDRIE);
 668:	55 98       	cbi	0x0a, 5	; 10
				TOKEN_FLAG = 1;
				tmpTxChar &= 0b00011111;
				Disable_UDREIE();
			}
			
			UDR_COM = tmpTxChar;
 66a:	ec b9       	out	0x0c, r30	; 12
			if(tail >= BUF_LEN)tail = 0;
 66c:	80 91 6e 00 	lds	r24, 0x006E
 670:	90 91 6f 00 	lds	r25, 0x006F
 674:	44 97       	sbiw	r24, 0x14	; 20
 676:	20 f0       	brcs	.+8      	; 0x680 <__vector_12+0xd0>
 678:	10 92 6f 00 	sts	0x006F, r1
 67c:	10 92 6e 00 	sts	0x006E, r1
			if(head == tail)
 680:	20 91 6c 00 	lds	r18, 0x006C
 684:	30 91 6d 00 	lds	r19, 0x006D
 688:	80 91 6e 00 	lds	r24, 0x006E
 68c:	90 91 6f 00 	lds	r25, 0x006F
 690:	28 17       	cp	r18, r24
 692:	39 07       	cpc	r19, r25
 694:	09 f0       	breq	.+2      	; 0x698 <__vector_12+0xe8>
 696:	3d c0       	rjmp	.+122    	; 0x712 <__vector_12+0x162>
 698:	3b c0       	rjmp	.+118    	; 0x710 <__vector_12+0x160>
				Disable_UDREIE();
			}
		}
		else
		{
			UDR_COM = byteSendArr[byteCntr++];
 69a:	80 91 60 00 	lds	r24, 0x0060
 69e:	90 91 61 00 	lds	r25, 0x0061
 6a2:	fc 01       	movw	r30, r24
 6a4:	eb 56       	subi	r30, 0x6B	; 107
 6a6:	ff 4f       	sbci	r31, 0xFF	; 255
 6a8:	20 81       	ld	r18, Z
 6aa:	2c b9       	out	0x0c, r18	; 12
 6ac:	01 96       	adiw	r24, 0x01	; 1
 6ae:	90 93 61 00 	sts	0x0061, r25
 6b2:	80 93 60 00 	sts	0x0060, r24
		
			if(extMode == EXT_DIG_REQ)
 6b6:	80 91 62 00 	lds	r24, 0x0062
 6ba:	90 91 63 00 	lds	r25, 0x0063
 6be:	89 2b       	or	r24, r25
 6c0:	41 f4       	brne	.+16     	; 0x6d2 <__vector_12+0x122>
			{
				if(byteCntr == 3)
 6c2:	80 91 60 00 	lds	r24, 0x0060
 6c6:	90 91 61 00 	lds	r25, 0x0061
 6ca:	83 30       	cpi	r24, 0x03	; 3
 6cc:	91 05       	cpc	r25, r1
 6ce:	09 f5       	brne	.+66     	; 0x712 <__vector_12+0x162>
 6d0:	1b c0       	rjmp	.+54     	; 0x708 <__vector_12+0x158>
				{
					extMode = EXT_IDLE;
					Disable_UDREIE();
				}
			}
			else if(extMode == EXT_ADC_REQ)
 6d2:	80 91 62 00 	lds	r24, 0x0062
 6d6:	90 91 63 00 	lds	r25, 0x0063
 6da:	01 97       	sbiw	r24, 0x01	; 1
 6dc:	39 f4       	brne	.+14     	; 0x6ec <__vector_12+0x13c>
			{
				if(byteCntr == 6)
 6de:	80 91 60 00 	lds	r24, 0x0060
 6e2:	90 91 61 00 	lds	r25, 0x0061
 6e6:	06 97       	sbiw	r24, 0x06	; 6
 6e8:	a1 f4       	brne	.+40     	; 0x712 <__vector_12+0x162>
 6ea:	0c c0       	rjmp	.+24     	; 0x704 <__vector_12+0x154>
				{
					extMode = EXT_IDLE;
					Disable_UDREIE();
				}
			}
			else if(extMode == EXT_INIT)
 6ec:	80 91 62 00 	lds	r24, 0x0062
 6f0:	90 91 63 00 	lds	r25, 0x0063
 6f4:	02 97       	sbiw	r24, 0x02	; 2
 6f6:	69 f4       	brne	.+26     	; 0x712 <__vector_12+0x162>
			{
		
				if(byteCntr == 2)
 6f8:	80 91 60 00 	lds	r24, 0x0060
 6fc:	90 91 61 00 	lds	r25, 0x0061
 700:	02 97       	sbiw	r24, 0x02	; 2
 702:	39 f4       	brne	.+14     	; 0x712 <__vector_12+0x162>
				{
			
					extMode = EXT_IDLE;
 704:	83 e0       	ldi	r24, 0x03	; 3
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	90 93 63 00 	sts	0x0063, r25
 70c:	80 93 62 00 	sts	0x0062, r24
#ifdef __AVR_ATmega1284P__
UCSRB_COM &= ~(1<<UDRIE0);
#endif

#ifdef __AVR_ATmega8__
UCSRB_COM &= ~(1<<UDRIE);
 710:	55 98       	cbi	0x0a, 5	; 10
					Disable_UDREIE();
				}
			}
		}
	}
}
 712:	ff 91       	pop	r31
 714:	ef 91       	pop	r30
 716:	9f 91       	pop	r25
 718:	8f 91       	pop	r24
 71a:	3f 91       	pop	r19
 71c:	2f 91       	pop	r18
 71e:	0f 90       	pop	r0
 720:	0f be       	out	0x3f, r0	; 63
 722:	0f 90       	pop	r0
 724:	1f 90       	pop	r1
 726:	18 95       	reti

00000728 <_exit>:
 728:	f8 94       	cli

0000072a <__stop_program>:
 72a:	ff cf       	rjmp	.-2      	; 0x72a <__stop_program>

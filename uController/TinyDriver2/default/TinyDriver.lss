
TinyDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001a6  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  0000023c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000a8  00000000  00000000  00000277  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000064  00000000  00000000  0000031f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e7  00000000  00000000  00000383  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000a3  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e6 ea       	ldi	r30, 0xA6	; 166
  32:	f1 e0       	ldi	r31, 0x01	; 1
  34:	02 c0       	rjmp	.+4      	; 0x3a <.do_copy_data_start>

00000036 <.do_copy_data_loop>:
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0

0000003a <.do_copy_data_start>:
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <.do_copy_data_loop>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a4 36       	cpi	r26, 0x64	; 100
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	a7 c0       	rjmp	.+334    	; 0x1a2 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:
PB 0 Forward Enable
*/

int main(void)
{ 
	DDRB = 0b00000111; 
  56:	87 e0       	ldi	r24, 0x07	; 7
  58:	87 bb       	out	0x17, r24	; 23
 
	TCCR0B = 1; 
  5a:	81 e0       	ldi	r24, 0x01	; 1
  5c:	83 bf       	out	0x33, r24	; 51

 	TCCR1 = 0b01100100; 
  5e:	84 e6       	ldi	r24, 0x64	; 100
  60:	80 bf       	out	0x30, r24	; 48
	OCR1C = 255; 
  62:	8f ef       	ldi	r24, 0xFF	; 255
  64:	8d bd       	out	0x2d, r24	; 45
		{
			if(state == 2)
			{
				DDRB |= 0b00000010;//set Pin to output
				if(pulseLength < BOTTOM)pulseLength = BOTTOM;
				OCR1A = BOTTOM - pulseLength;
  66:	63 e9       	ldi	r22, 0x93	; 147
		else if(pulseLength < NEUTRAL_LOWER)
		{
			if(state == 2)
			{
				DDRB |= 0b00000010;//set Pin to output
				if(pulseLength < BOTTOM)pulseLength = BOTTOM;
  68:	43 e9       	ldi	r20, 0x93	; 147
  6a:	51 e0       	ldi	r21, 0x01	; 1
		if(pulseLength > NEUTRAL_UPPER) // grater than 
		{ 
			if(state == 8)
			{
				DDRB |= 0b00000010;//set Pin to output
				if(pulseLength > TOP) pulseLength = TOP;
  6c:	2b e9       	ldi	r18, 0x9B	; 155
  6e:	33 e0       	ldi	r19, 0x03	; 3
 	TCCR1 = 0b01100100; 
	OCR1C = 255; 

	while(1)
	{ 
	 	while((PINB & 8) == 0);
  70:	b3 9b       	sbis	0x16, 3	; 22
  72:	fe cf       	rjmp	.-4      	; 0x70 <main+0x1a>
		TCNT0 = 0;
  74:	12 be       	out	0x32, r1	; 50
		pulseLength = 0;
  76:	10 92 63 00 	sts	0x0063, r1
  7a:	10 92 62 00 	sts	0x0062, r1
  7e:	0d c0       	rjmp	.+26     	; 0x9a <main+0x44>
		while((PINB & 8) == 8)
		{
			while(TCNT0 < 16); // creates timeslots with 2µs length
  80:	82 b7       	in	r24, 0x32	; 50
  82:	80 31       	cpi	r24, 0x10	; 16
  84:	e8 f3       	brcs	.-6      	; 0x80 <main+0x2a>
			TCNT0 = 0;
  86:	12 be       	out	0x32, r1	; 50
			pulseLength++;
  88:	80 91 62 00 	lds	r24, 0x0062
  8c:	90 91 63 00 	lds	r25, 0x0063
  90:	01 96       	adiw	r24, 0x01	; 1
  92:	90 93 63 00 	sts	0x0063, r25
  96:	80 93 62 00 	sts	0x0062, r24
	while(1)
	{ 
	 	while((PINB & 8) == 0);
		TCNT0 = 0;
		pulseLength = 0;
		while((PINB & 8) == 8)
  9a:	b3 99       	sbic	0x16, 3	; 22
  9c:	f1 cf       	rjmp	.-30     	; 0x80 <main+0x2a>
			while(TCNT0 < 16); // creates timeslots with 2µs length
			TCNT0 = 0;
			pulseLength++;
		} 

		if(pulseLength > NEUTRAL_UPPER) // grater than 
  9e:	80 91 62 00 	lds	r24, 0x0062
  a2:	90 91 63 00 	lds	r25, 0x0063
  a6:	8d 59       	subi	r24, 0x9D	; 157
  a8:	92 40       	sbci	r25, 0x02	; 2
  aa:	48 f1       	brcs	.+82     	; 0xfe <main+0xa8>
		{ 
			if(state == 8)
  ac:	80 91 60 00 	lds	r24, 0x0060
  b0:	90 91 61 00 	lds	r25, 0x0061
  b4:	08 97       	sbiw	r24, 0x08	; 8
  b6:	e9 f4       	brne	.+58     	; 0xf2 <main+0x9c>
			{
				DDRB |= 0b00000010;//set Pin to output
  b8:	b9 9a       	sbi	0x17, 1	; 23
				if(pulseLength > TOP) pulseLength = TOP;
  ba:	80 91 62 00 	lds	r24, 0x0062
  be:	90 91 63 00 	lds	r25, 0x0063
  c2:	8c 59       	subi	r24, 0x9C	; 156
  c4:	93 40       	sbci	r25, 0x03	; 3
  c6:	20 f0       	brcs	.+8      	; 0xd0 <main+0x7a>
  c8:	30 93 63 00 	sts	0x0063, r19
  cc:	20 93 62 00 	sts	0x0062, r18
				pulseLength -= NEUTRAL_UPPER;
  d0:	80 91 62 00 	lds	r24, 0x0062
  d4:	90 91 63 00 	lds	r25, 0x0063
  d8:	8c 59       	subi	r24, 0x9C	; 156
  da:	92 40       	sbci	r25, 0x02	; 2
  dc:	90 93 63 00 	sts	0x0063, r25
  e0:	80 93 62 00 	sts	0x0062, r24
				OCR1A = pulseLength;
  e4:	80 91 62 00 	lds	r24, 0x0062
  e8:	90 91 63 00 	lds	r25, 0x0063
  ec:	8e bd       	out	0x2e, r24	; 46
				PORTB |= 0b00000001;
  ee:	c0 9a       	sbi	0x18, 0	; 24
  f0:	bf cf       	rjmp	.-130    	; 0x70 <main+0x1a>
			}
			else
			{
				OCR1A = 0; // set PWM to 0% dutycycle
  f2:	1e bc       	out	0x2e, r1	; 46
				DDRB &= 0b11111101;//set Pin to input
  f4:	b9 98       	cbi	0x17, 1	; 23
				PORTB &= 0b11111010; // set fw/be enable low
  f6:	88 b3       	in	r24, 0x18	; 24
  f8:	8a 7f       	andi	r24, 0xFA	; 250
  fa:	88 bb       	out	0x18, r24	; 24
  fc:	48 c0       	rjmp	.+144    	; 0x18e <main+0x138>
				state++;
			}
		} 
		else if(pulseLength < NEUTRAL_LOWER)
  fe:	80 91 62 00 	lds	r24, 0x0062
 102:	90 91 63 00 	lds	r25, 0x0063
 106:	82 59       	subi	r24, 0x92	; 146
 108:	92 40       	sbci	r25, 0x02	; 2
 10a:	30 f5       	brcc	.+76     	; 0x158 <main+0x102>
		{
			if(state == 2)
 10c:	80 91 60 00 	lds	r24, 0x0060
 110:	90 91 61 00 	lds	r25, 0x0061
 114:	02 97       	sbiw	r24, 0x02	; 2
 116:	a9 f4       	brne	.+42     	; 0x142 <main+0xec>
			{
				DDRB |= 0b00000010;//set Pin to output
 118:	b9 9a       	sbi	0x17, 1	; 23
				if(pulseLength < BOTTOM)pulseLength = BOTTOM;
 11a:	80 91 62 00 	lds	r24, 0x0062
 11e:	90 91 63 00 	lds	r25, 0x0063
 122:	83 59       	subi	r24, 0x93	; 147
 124:	91 40       	sbci	r25, 0x01	; 1
 126:	20 f4       	brcc	.+8      	; 0x130 <main+0xda>
 128:	50 93 63 00 	sts	0x0063, r21
 12c:	40 93 62 00 	sts	0x0062, r20
				OCR1A = BOTTOM - pulseLength;
 130:	80 91 62 00 	lds	r24, 0x0062
 134:	90 91 63 00 	lds	r25, 0x0063
 138:	76 2f       	mov	r23, r22
 13a:	78 1b       	sub	r23, r24
 13c:	7e bd       	out	0x2e, r23	; 46
				PORTB |= 0b00000100;
 13e:	c2 9a       	sbi	0x18, 2	; 24
 140:	97 cf       	rjmp	.-210    	; 0x70 <main+0x1a>
			}
			else
			{
				OCR1A = 0; // set PWM to 0% dutycycle
 142:	1e bc       	out	0x2e, r1	; 46
				DDRB &= 0b11111101;//set Pin to input
 144:	b9 98       	cbi	0x17, 1	; 23
				PORTB &= 0b11111010; // set fw/be enable low
 146:	88 b3       	in	r24, 0x18	; 24
 148:	8a 7f       	andi	r24, 0xFA	; 250
 14a:	88 bb       	out	0x18, r24	; 24
				state--;
 14c:	80 91 60 00 	lds	r24, 0x0060
 150:	90 91 61 00 	lds	r25, 0x0061
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	20 c0       	rjmp	.+64     	; 0x198 <main+0x142>
			}
		}
		else
		{
			OCR1A = 0; // set PWM to 0% dutycycle
 158:	1e bc       	out	0x2e, r1	; 46
			DDRB &= 0b11111101;//set Pin to input
 15a:	b9 98       	cbi	0x17, 1	; 23
			PORTB &= 0b11111010; // set fw/be enable low
 15c:	88 b3       	in	r24, 0x18	; 24
 15e:	8a 7f       	andi	r24, 0xFA	; 250
 160:	88 bb       	out	0x18, r24	; 24

			if(state > 5) state--;
 162:	80 91 60 00 	lds	r24, 0x0060
 166:	90 91 61 00 	lds	r25, 0x0061
 16a:	06 97       	sbiw	r24, 0x06	; 6
 16c:	48 f0       	brcs	.+18     	; 0x180 <main+0x12a>
 16e:	80 91 60 00 	lds	r24, 0x0060
 172:	90 91 61 00 	lds	r25, 0x0061
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	90 93 61 00 	sts	0x0061, r25
 17c:	80 93 60 00 	sts	0x0060, r24
			if(state < 5) state++;
 180:	80 91 60 00 	lds	r24, 0x0060
 184:	90 91 61 00 	lds	r25, 0x0061
 188:	05 97       	sbiw	r24, 0x05	; 5
 18a:	08 f0       	brcs	.+2      	; 0x18e <main+0x138>
 18c:	71 cf       	rjmp	.-286    	; 0x70 <main+0x1a>
 18e:	80 91 60 00 	lds	r24, 0x0060
 192:	90 91 61 00 	lds	r25, 0x0061
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	90 93 61 00 	sts	0x0061, r25
 19c:	80 93 60 00 	sts	0x0060, r24
 1a0:	67 cf       	rjmp	.-306    	; 0x70 <main+0x1a>

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>

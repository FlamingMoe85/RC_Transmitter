
SpiSniffer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000006c  00800100  00800100  000002a2  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000009a  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000150  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000009a  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001a9  00000000  00000000  00000546  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000cc  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_2>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_13>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e2       	ldi	r30, 0x2E	; 46
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 36       	cpi	r26, 0x6C	; 108
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 15 01 	jmp	0x22a	; 0x22a <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
EIFR |= 0b00000010;
EIMSK |= 0b00000010;
*/


UCSR0A = 2;
  ce:	22 e0       	ldi	r18, 0x02	; 2
  d0:	20 93 c0 00 	sts	0x00C0, r18
UBRR0H = (unsigned char)(0);
  d4:	10 92 c5 00 	sts	0x00C5, r1
UBRR0L = (unsigned char)(16);
  d8:	80 e1       	ldi	r24, 0x10	; 16
  da:	80 93 c4 00 	sts	0x00C4, r24
/* Enable receiver and transmitter */
UCSR0B = (1<<3);//
  de:	88 e0       	ldi	r24, 0x08	; 8
  e0:	80 93 c1 00 	sts	0x00C1, r24
/* Set frame format: 8data, 1stop bit */

OCR1A = 1000;
  e4:	88 ee       	ldi	r24, 0xE8	; 232
  e6:	93 e0       	ldi	r25, 0x03	; 3
  e8:	90 93 89 00 	sts	0x0089, r25
  ec:	80 93 88 00 	sts	0x0088, r24
TCCR1A = 3;
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	80 93 80 00 	sts	0x0080, r24
TCCR1B = 0b00011010;
  f6:	8a e1       	ldi	r24, 0x1A	; 26
  f8:	80 93 81 00 	sts	0x0081, r24
TIMSK1 = 2;
  fc:	20 93 6f 00 	sts	0x006F, r18



DDRD = 0b01000010;//bit 6 LED
 100:	82 e4       	ldi	r24, 0x42	; 66
 102:	8a b9       	out	0x0a, r24	; 10
DDRA = 1;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	81 b9       	out	0x01, r24	; 1
sei();
 108:	78 94       	sei
 10a:	20 91 07 01 	lds	r18, 0x0107
while(1)
{
	while((PIND & 8) == 0)
 10e:	4b 9b       	sbis	0x09, 3	; 9
 110:	fe cf       	rjmp	.-4      	; 0x10e <main+0x40>
	{

	}
	TCNT1 = 0;
 112:	10 92 85 00 	sts	0x0085, r1
 116:	10 92 84 00 	sts	0x0084, r1
	shftVar = shftVar <<1;
 11a:	80 91 01 01 	lds	r24, 0x0101
 11e:	88 0f       	add	r24, r24
 120:	80 93 01 01 	sts	0x0101, r24
	shftVar |= (PIND & 1);
 124:	90 91 01 01 	lds	r25, 0x0101
 128:	89 b1       	in	r24, 0x09	; 9
 12a:	81 70       	andi	r24, 0x01	; 1
 12c:	89 2b       	or	r24, r25
 12e:	80 93 01 01 	sts	0x0101, r24
	bitCntr++;
 132:	80 91 00 01 	lds	r24, 0x0100
 136:	8f 5f       	subi	r24, 0xFF	; 255
 138:	80 93 00 01 	sts	0x0100, r24
	while((PIND & 8))
 13c:	4b 99       	sbic	0x09, 3	; 9
 13e:	fe cf       	rjmp	.-4      	; 0x13c <main+0x6e>
	{

	}
	TCCR1B |= 2;
 140:	80 91 81 00 	lds	r24, 0x0081
 144:	82 60       	ori	r24, 0x02	; 2
 146:	80 93 81 00 	sts	0x0081, r24
	if(bitCntr == 8)
 14a:	80 91 00 01 	lds	r24, 0x0100
 14e:	88 30       	cpi	r24, 0x08	; 8
 150:	f1 f6       	brne	.-68     	; 0x10e <main+0x40>
	{
		PORTA = tog++;
 152:	22 b9       	out	0x02, r18	; 2
		valArr[charCntr] = shftVar;
 154:	e0 91 02 01 	lds	r30, 0x0102
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 91 01 01 	lds	r24, 0x0101
 15e:	e8 5f       	subi	r30, 0xF8	; 248
 160:	fe 4f       	sbci	r31, 0xFE	; 254
 162:	80 83       	st	Z, r24
		//UDR0 = 0b11000011;//shftVar;
		shftVar = 0;
 164:	10 92 01 01 	sts	0x0101, r1
		bitCntr = 0;
 168:	10 92 00 01 	sts	0x0100, r1
		charCntr++;
 16c:	80 91 02 01 	lds	r24, 0x0102
 170:	8f 5f       	subi	r24, 0xFF	; 255
 172:	80 93 02 01 	sts	0x0102, r24
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	ca cf       	rjmp	.-108    	; 0x10e <main+0x40>

0000017a <__vector_2>:
}
}


SIGNAL (INT1_vect)
{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
		{
			PORTD |= 64;
		}
	}
	*/
}
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_13>:

SIGNAL(TIMER1_COMPA_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	0b b6       	in	r0, 0x3b	; 59
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	ef 93       	push	r30
 1a2:	ff 93       	push	r31

charCntr2=0;
 1a4:	10 92 03 01 	sts	0x0103, r1
	TCCR1B &= 0b11111000;
 1a8:	80 91 81 00 	lds	r24, 0x0081
 1ac:	88 7f       	andi	r24, 0xF8	; 248
 1ae:	80 93 81 00 	sts	0x0081, r24
	TCNT1 = 0;
 1b2:	10 92 85 00 	sts	0x0085, r1
 1b6:	10 92 84 00 	sts	0x0084, r1
	bitCntr = 0;
 1ba:	10 92 00 01 	sts	0x0100, r1
	shftVar = 0;
 1be:	10 92 01 01 	sts	0x0101, r1
	tog = 0;
 1c2:	10 92 07 01 	sts	0x0107, r1
 1c6:	10 c0       	rjmp	.+32     	; 0x1e8 <__vector_13+0x5a>
/*	*/ 
//if(charCntr == 6)
{
	while(charCntr2 < charCntr)
	{
		UDR0 = valArr[charCntr2++];
 1c8:	80 91 03 01 	lds	r24, 0x0103
 1cc:	e8 2f       	mov	r30, r24
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	e8 5f       	subi	r30, 0xF8	; 248
 1d2:	fe 4f       	sbci	r31, 0xFE	; 254
 1d4:	90 81       	ld	r25, Z
 1d6:	90 93 c6 00 	sts	0x00C6, r25
 1da:	8f 5f       	subi	r24, 0xFF	; 255
 1dc:	80 93 03 01 	sts	0x0103, r24
		while((UCSR0A & 32) != 32);
 1e0:	80 91 c0 00 	lds	r24, 0x00C0
 1e4:	85 ff       	sbrs	r24, 5
 1e6:	fc cf       	rjmp	.-8      	; 0x1e0 <__vector_13+0x52>
	tog = 0;
	/*UDR0 = charCntr;*/
/*	*/ 
//if(charCntr == 6)
{
	while(charCntr2 < charCntr)
 1e8:	90 91 03 01 	lds	r25, 0x0103
 1ec:	80 91 02 01 	lds	r24, 0x0102
 1f0:	98 17       	cp	r25, r24
 1f2:	50 f3       	brcs	.-44     	; 0x1c8 <__vector_13+0x3a>
	{
		UDR0 = valArr[charCntr2++];
		while((UCSR0A & 32) != 32);
	}
		while((UCSR0A & 32) != 32);
 1f4:	80 91 c0 00 	lds	r24, 0x00C0
 1f8:	85 ff       	sbrs	r24, 5
 1fa:	fc cf       	rjmp	.-8      	; 0x1f4 <__vector_13+0x66>
		UDR0 = 13;
 1fc:	8d e0       	ldi	r24, 0x0D	; 13
 1fe:	80 93 c6 00 	sts	0x00C6, r24
		while((UCSR0A & 32) != 32);
 202:	80 91 c0 00 	lds	r24, 0x00C0
 206:	85 ff       	sbrs	r24, 5
 208:	fc cf       	rjmp	.-8      	; 0x202 <__vector_13+0x74>
		UDR0 = 10; 
 20a:	8a e0       	ldi	r24, 0x0A	; 10
 20c:	80 93 c6 00 	sts	0x00C6, r24
}	
	charCntr = 0;
 210:	10 92 02 01 	sts	0x0102, r1
}
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	0f 90       	pop	r0
 21e:	0b be       	out	0x3b, r0	; 59
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <_exit>:
 22a:	f8 94       	cli

0000022c <__stop_program>:
 22c:	ff cf       	rjmp	.-2      	; 0x22c <__stop_program>
